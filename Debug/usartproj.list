
usartproj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006298  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006428  08006428  00007428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064ec  080064ec  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080064ec  080064ec  000074ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f4  080064f4  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f4  080064f4  000074f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064f8  080064f8  000074f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080064fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00004be8  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004c44  20004c44  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017539  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a1  00000000  00000000  0001f5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  00022768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f75  00000000  00000000  00023b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003314  00000000  00000000  00024abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014a6f  00000000  00000000  00027dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5649  00000000  00000000  0003c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111e89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005924  00000000  00000000  00111ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001177f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006410 	.word	0x08006410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006410 	.word	0x08006410

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <UART_Transmit>:
void ReceiveTask(void *argument);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_Transmit(char *data) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    xSemaphoreTake(uartMutex, portMAX_DELAY);
 80005b4:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <UART_Transmit+0x44>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 ffa7 	bl	8003510 <xQueueSemaphoreTake>
    HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff fe04 	bl	80001d0 <strlen>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	4808      	ldr	r0, [pc, #32]	@ (80005f4 <UART_Transmit+0x48>)
 80005d4:	f001 fd2c 	bl	8002030 <HAL_UART_Transmit>
    xSemaphoreGive(uartMutex);
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <UART_Transmit+0x44>)
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	2300      	movs	r3, #0
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	f002 fd13 	bl	800300c <xQueueGenericSend>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000c0 	.word	0x200000c0
 80005f4:	20000078 	.word	0x20000078

080005f8 <TransmitTask>:
    receivedData = USART1->DR;
    xSemaphoreGive(uartMutex);
    return receivedData;
}

void TransmitTask(void *argument) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    while (1) {
        UART_Transmit("Hello from TransmitTask!\r\n");
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <TransmitTask+0x1c>)
 8000602:	f7ff ffd3 	bl	80005ac <UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000606:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800060a:	f003 fbd5 	bl	8003db8 <vTaskDelay>
        UART_Transmit("Hello from TransmitTask!\r\n");
 800060e:	bf00      	nop
 8000610:	e7f6      	b.n	8000600 <TransmitTask+0x8>
 8000612:	bf00      	nop
 8000614:	08006428 	.word	0x08006428

08000618 <ReceiveTask>:
    }
}

void ReceiveTask(void *argument) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b0a4      	sub	sp, #144	@ 0x90
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    uint8_t rxBuffer[64];
    uint8_t rxByte;
    uint16_t index = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

    for (;;) {
        if (HAL_UART_Receive(&huart1, &rxByte, 1, 100) == HAL_OK) {
 8000626:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 800062a:	2364      	movs	r3, #100	@ 0x64
 800062c:	2201      	movs	r2, #1
 800062e:	481f      	ldr	r0, [pc, #124]	@ (80006ac <ReceiveTask+0x94>)
 8000630:	f001 fd89 	bl	8002146 <HAL_UART_Receive>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d133      	bne.n	80006a2 <ReceiveTask+0x8a>
            // Check for message terminator
            if (rxByte == '\n' || index >= sizeof(rxBuffer)-1) {
 800063a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800063e:	2b0a      	cmp	r3, #10
 8000640:	d003      	beq.n	800064a <ReceiveTask+0x32>
 8000642:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000646:	2b3e      	cmp	r3, #62	@ 0x3e
 8000648:	d920      	bls.n	800068c <ReceiveTask+0x74>
                rxBuffer[index] = '\0'; // Null-terminate
 800064a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800064e:	3390      	adds	r3, #144	@ 0x90
 8000650:	443b      	add	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	f803 2c44 	strb.w	r2, [r3, #-68]

                // Only process if it's not an ACK
                if (strstr((char*)rxBuffer, "ACK") == NULL) {
 8000658:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800065c:	4914      	ldr	r1, [pc, #80]	@ (80006b0 <ReceiveTask+0x98>)
 800065e:	4618      	mov	r0, r3
 8000660:	f005 f9ec 	bl	8005a3c <strstr>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d10c      	bne.n	8000684 <ReceiveTask+0x6c>
                    char msg[64];
                    sprintf(msg, "Complete Message: %s\r\n", rxBuffer);
 800066a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4910      	ldr	r1, [pc, #64]	@ (80006b4 <ReceiveTask+0x9c>)
 8000674:	4618      	mov	r0, r3
 8000676:	f005 f9b7 	bl	80059e8 <siprintf>
                    UART_Transmit(msg);
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff94 	bl	80005ac <UART_Transmit>
                }
                index = 0; // Reset buffer
 8000684:	2300      	movs	r3, #0
 8000686:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800068a:	e00a      	b.n	80006a2 <ReceiveTask+0x8a>
            } else {
                rxBuffer[index++] = rxByte;
 800068c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	f8a7 208e 	strh.w	r2, [r7, #142]	@ 0x8e
 8000696:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800069a:	3390      	adds	r3, #144	@ 0x90
 800069c:	443b      	add	r3, r7
 800069e:	f803 2c44 	strb.w	r2, [r3, #-68]
            }
        }
        osDelay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f002 fa36 	bl	8002b14 <osDelay>
        if (HAL_UART_Receive(&huart1, &rxByte, 1, 100) == HAL_OK) {
 80006a8:	e7bd      	b.n	8000626 <ReceiveTask+0xe>
 80006aa:	bf00      	nop
 80006ac:	20000078 	.word	0x20000078
 80006b0:	08006444 	.word	0x08006444
 80006b4:	08006448 	.word	0x08006448

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08c      	sub	sp, #48	@ 0x30
 80006bc:	af02      	add	r7, sp, #8
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 80006be:	f000 fa85 	bl	8000bcc <HAL_Init>
    SystemClock_Config();
 80006c2:	f000 f853 	bl	800076c <SystemClock_Config>
    MX_GPIO_Init();
 80006c6:	f000 f8d9 	bl	800087c <MX_GPIO_Init>
    MX_USART1_UART_Init();
 80006ca:	f000 f8ad 	bl	8000828 <MX_USART1_UART_Init>

    /* USER CODE BEGIN 2 */
    uartMutex = xSemaphoreCreateMutex();
 80006ce:	2001      	movs	r0, #1
 80006d0:	f002 fc83 	bl	8002fda <xQueueCreateMutex>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000740 <main+0x88>)
 80006d8:	6013      	str	r3, [r2, #0]
    if (uartMutex == NULL) {
 80006da:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <main+0x88>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d101      	bne.n	80006e6 <main+0x2e>
        Error_Handler();
 80006e2:	f000 f8e5 	bl	80008b0 <Error_Handler>
    }
    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize();
 80006e6:	f002 f939 	bl	800295c <osKernelInitialize>

    /* Create the thread(s) */
    /* creation of defaultTask */
    const osThreadAttr_t defaultTask_attributes = {
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2224      	movs	r2, #36	@ 0x24
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f005 f99b 	bl	8005a2c <memset>
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <main+0x8c>)
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	2318      	movs	r3, #24
 8000702:	61fb      	str	r3, [r7, #28]
        .name = "defaultTask",
        .stack_size = 128 * 4,
        .priority = (osPriority_t) osPriorityNormal,
    };
    osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	461a      	mov	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	480f      	ldr	r0, [pc, #60]	@ (8000748 <main+0x90>)
 800070c:	f002 f970 	bl	80029f0 <osThreadNew>

    /* USER CODE BEGIN RTOS_THREADS */
    xTaskCreate(TransmitTask, "TransmitTask", 128, NULL, 1, NULL);
 8000710:	2300      	movs	r3, #0
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	2301      	movs	r3, #1
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2300      	movs	r3, #0
 800071a:	2280      	movs	r2, #128	@ 0x80
 800071c:	490b      	ldr	r1, [pc, #44]	@ (800074c <main+0x94>)
 800071e:	480c      	ldr	r0, [pc, #48]	@ (8000750 <main+0x98>)
 8000720:	f003 f9ec 	bl	8003afc <xTaskCreate>
    xTaskCreate(ReceiveTask, "ReceiveTask", 128, NULL, 1, NULL);
 8000724:	2300      	movs	r3, #0
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	2301      	movs	r3, #1
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	2280      	movs	r2, #128	@ 0x80
 8000730:	4908      	ldr	r1, [pc, #32]	@ (8000754 <main+0x9c>)
 8000732:	4809      	ldr	r0, [pc, #36]	@ (8000758 <main+0xa0>)
 8000734:	f003 f9e2 	bl	8003afc <xTaskCreate>
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8000738:	f002 f934 	bl	80029a4 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */
    while (1) {}
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <main+0x84>
 8000740:	200000c0 	.word	0x200000c0
 8000744:	08006460 	.word	0x08006460
 8000748:	0800075d 	.word	0x0800075d
 800074c:	0800646c 	.word	0x0800646c
 8000750:	080005f9 	.word	0x080005f9
 8000754:	0800647c 	.word	0x0800647c
 8000758:	08000619 	.word	0x08000619

0800075c <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartDefaultTask(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        osDelay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f002 f9d5 	bl	8002b14 <osDelay>
 800076a:	e7fb      	b.n	8000764 <StartDefaultTask+0x8>

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	@ 0x50
 8000770:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	@ 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f005 f956 	bl	8005a2c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <SystemClock_Config+0xb4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a21      	ldr	r2, [pc, #132]	@ (8000820 <SystemClock_Config+0xb4>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <SystemClock_Config+0xb4>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <SystemClock_Config+0xb8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000824 <SystemClock_Config+0xb8>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <SystemClock_Config+0xb8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2310      	movs	r3, #16
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fca1 	bl	8001124 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x80>
        Error_Handler();
 80007e8:	f000 f862 	bl	80008b0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f000 ff04 	bl	8001614 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xaa>
        Error_Handler();
 8000812:	f000 f84d 	bl	80008b0 <Error_Handler>
    }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	@ 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <MX_USART1_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 8000860:	f001 fb96 	bl	8001f90 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART1_UART_Init+0x46>
        Error_Handler();
 800086a:	f000 f821 	bl	80008b0 <Error_Handler>
    }
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000078 	.word	0x20000078
 8000878:	40011000 	.word	0x40011000

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_GPIO_Init+0x30>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <MX_GPIO_Init+0x30>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_GPIO_Init+0x30>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
    __disable_irq();
    while (1) {}
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_MspInit+0x54>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	4a11      	ldr	r2, [pc, #68]	@ (8000910 <HAL_MspInit+0x54>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <HAL_MspInit+0x54>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <HAL_MspInit+0x54>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <HAL_MspInit+0x54>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_MspInit+0x54>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	210f      	movs	r1, #15
 80008fe:	f06f 0001 	mvn.w	r0, #1
 8000902:	f000 fa49 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	@ (8000998 <HAL_UART_MspInit+0x84>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d12c      	bne.n	8000990 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <HAL_UART_MspInit+0x88>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	4a17      	ldr	r2, [pc, #92]	@ (800099c <HAL_UART_MspInit+0x88>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6453      	str	r3, [r2, #68]	@ 0x44
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <HAL_UART_MspInit+0x88>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <HAL_UART_MspInit+0x88>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a10      	ldr	r2, [pc, #64]	@ (800099c <HAL_UART_MspInit+0x88>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_UART_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800096e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000980:	2307      	movs	r3, #7
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <HAL_UART_MspInit+0x8c>)
 800098c:	f000 fa2e 	bl	8000dec <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40011000 	.word	0x40011000
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000

080009a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	@ 0x38
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4b34      	ldr	r3, [pc, #208]	@ (8000a8c <HAL_InitTick+0xe8>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	4a33      	ldr	r2, [pc, #204]	@ (8000a8c <HAL_InitTick+0xe8>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c4:	4b31      	ldr	r3, [pc, #196]	@ (8000a8c <HAL_InitTick+0xe8>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d0:	f107 0210 	add.w	r2, r7, #16
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fffa 	bl	80019d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009e0:	6a3b      	ldr	r3, [r7, #32]
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d103      	bne.n	80009f2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ea:	f000 ffcb 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 80009ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80009f0:	e004      	b.n	80009fc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009f2:	f000 ffc7 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 80009f6:	4603      	mov	r3, r0
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009fe:	4a24      	ldr	r2, [pc, #144]	@ (8000a90 <HAL_InitTick+0xec>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	0c9b      	lsrs	r3, r3, #18
 8000a06:	3b01      	subs	r3, #1
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <HAL_InitTick+0xf0>)
 8000a0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a10:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a12:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <HAL_InitTick+0xf0>)
 8000a14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a18:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a94 <HAL_InitTick+0xf0>)
 8000a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <HAL_InitTick+0xf0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <HAL_InitTick+0xf0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_InitTick+0xf0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000a32:	4818      	ldr	r0, [pc, #96]	@ (8000a94 <HAL_InitTick+0xf0>)
 8000a34:	f001 f800 	bl	8001a38 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a3e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d11b      	bne.n	8000a7e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a46:	4813      	ldr	r0, [pc, #76]	@ (8000a94 <HAL_InitTick+0xf0>)
 8000a48:	f001 f850 	bl	8001aec <HAL_TIM_Base_Start_IT>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a52:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d111      	bne.n	8000a7e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a5a:	201c      	movs	r0, #28
 8000a5c:	f000 f9b8 	bl	8000dd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b0f      	cmp	r3, #15
 8000a64:	d808      	bhi.n	8000a78 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a66:	2200      	movs	r2, #0
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	201c      	movs	r0, #28
 8000a6c:	f000 f994 	bl	8000d98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a70:	4a09      	ldr	r2, [pc, #36]	@ (8000a98 <HAL_InitTick+0xf4>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	e002      	b.n	8000a7e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3738      	adds	r7, #56	@ 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	431bde83 	.word	0x431bde83
 8000a94:	200000c4 	.word	0x200000c4
 8000a98:	20000004 	.word	0x20000004

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ad8:	4802      	ldr	r0, [pc, #8]	@ (8000ae4 <TIM2_IRQHandler+0x10>)
 8000ada:	f001 f877 	bl	8001bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000c4 	.word	0x200000c4

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f005 f804 	bl	8005b24 <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20020000 	.word	0x20020000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	2000010c 	.word	0x2000010c
 8000b50:	20004c48 	.word	0x20004c48

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b7c:	f7ff ffea 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f004 ffc3 	bl	8005b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fd85 	bl	80006b8 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bbc:	080064fc 	.word	0x080064fc
  ldr r2, =_sbss
 8000bc0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bc4:	20004c44 	.word	0x20004c44

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	@ (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f8c4 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f7ff fed2 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe5c 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000110 	.word	0x20000110

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	@ (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	@ (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	@ (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	@ 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	@ 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f7ff ffb1 	bl	8000d1c <NVIC_EncodePriority>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff80 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff54 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e16b      	b.n	80010e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 815a 	bne.w	80010da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d005      	beq.n	8000e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d130      	bne.n	8000ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80b4 	beq.w	80010da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b60      	ldr	r3, [pc, #384]	@ (80010f8 <HAL_GPIO_Init+0x30c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	4a5f      	ldr	r2, [pc, #380]	@ (80010f8 <HAL_GPIO_Init+0x30c>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f82:	4b5d      	ldr	r3, [pc, #372]	@ (80010f8 <HAL_GPIO_Init+0x30c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80010fc <HAL_GPIO_Init+0x310>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a52      	ldr	r2, [pc, #328]	@ (8001100 <HAL_GPIO_Init+0x314>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d02b      	beq.n	8001012 <HAL_GPIO_Init+0x226>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a51      	ldr	r2, [pc, #324]	@ (8001104 <HAL_GPIO_Init+0x318>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d025      	beq.n	800100e <HAL_GPIO_Init+0x222>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a50      	ldr	r2, [pc, #320]	@ (8001108 <HAL_GPIO_Init+0x31c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d01f      	beq.n	800100a <HAL_GPIO_Init+0x21e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4f      	ldr	r2, [pc, #316]	@ (800110c <HAL_GPIO_Init+0x320>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x21a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001110 <HAL_GPIO_Init+0x324>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x216>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4d      	ldr	r2, [pc, #308]	@ (8001114 <HAL_GPIO_Init+0x328>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x212>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4c      	ldr	r2, [pc, #304]	@ (8001118 <HAL_GPIO_Init+0x32c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x20e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4b      	ldr	r2, [pc, #300]	@ (800111c <HAL_GPIO_Init+0x330>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x20a>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e00e      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	e00c      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	e00a      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8000ffe:	2305      	movs	r3, #5
 8001000:	e008      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8001002:	2304      	movs	r3, #4
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8001006:	2303      	movs	r3, #3
 8001008:	e004      	b.n	8001014 <HAL_GPIO_Init+0x228>
 800100a:	2302      	movs	r3, #2
 800100c:	e002      	b.n	8001014 <HAL_GPIO_Init+0x228>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8001012:	2300      	movs	r3, #0
 8001014:	69fa      	ldr	r2, [r7, #28]
 8001016:	f002 0203 	and.w	r2, r2, #3
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	4093      	lsls	r3, r2
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001024:	4935      	ldr	r1, [pc, #212]	@ (80010fc <HAL_GPIO_Init+0x310>)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3302      	adds	r3, #2
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001032:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <HAL_GPIO_Init+0x334>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001056:	4a32      	ldr	r2, [pc, #200]	@ (8001120 <HAL_GPIO_Init+0x334>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800105c:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <HAL_GPIO_Init+0x334>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001080:	4a27      	ldr	r2, [pc, #156]	@ (8001120 <HAL_GPIO_Init+0x334>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001086:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <HAL_GPIO_Init+0x334>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001120 <HAL_GPIO_Init+0x334>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <HAL_GPIO_Init+0x334>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d4:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <HAL_GPIO_Init+0x334>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3301      	adds	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	2b0f      	cmp	r3, #15
 80010e4:	f67f ae90 	bls.w	8000e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3724      	adds	r7, #36	@ 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40013800 	.word	0x40013800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020400 	.word	0x40020400
 8001108:	40020800 	.word	0x40020800
 800110c:	40020c00 	.word	0x40020c00
 8001110:	40021000 	.word	0x40021000
 8001114:	40021400 	.word	0x40021400
 8001118:	40021800 	.word	0x40021800
 800111c:	40021c00 	.word	0x40021c00
 8001120:	40013c00 	.word	0x40013c00

08001124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e267      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d075      	beq.n	800122e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001142:	4b88      	ldr	r3, [pc, #544]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b04      	cmp	r3, #4
 800114c:	d00c      	beq.n	8001168 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	4b85      	ldr	r3, [pc, #532]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001156:	2b08      	cmp	r3, #8
 8001158:	d112      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115a:	4b82      	ldr	r3, [pc, #520]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001162:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001166:	d10b      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	4b7e      	ldr	r3, [pc, #504]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d05b      	beq.n	800122c <HAL_RCC_OscConfig+0x108>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d157      	bne.n	800122c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e242      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001188:	d106      	bne.n	8001198 <HAL_RCC_OscConfig+0x74>
 800118a:	4b76      	ldr	r3, [pc, #472]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a75      	ldr	r2, [pc, #468]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e01d      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x98>
 80011a2:	4b70      	ldr	r3, [pc, #448]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6f      	ldr	r2, [pc, #444]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6c      	ldr	r2, [pc, #432]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e00b      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 80011bc:	4b69      	ldr	r3, [pc, #420]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a68      	ldr	r2, [pc, #416]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b66      	ldr	r3, [pc, #408]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a65      	ldr	r2, [pc, #404]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fd18 	bl	8000c10 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fd14 	bl	8000c10 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	@ 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e207      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0xc0>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fd04 	bl	8000c10 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fd00 	bl	8000c10 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	@ 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1f3      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	4b51      	ldr	r3, [pc, #324]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0xe8>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d063      	beq.n	8001302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800123a:	4b4a      	ldr	r3, [pc, #296]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001246:	4b47      	ldr	r3, [pc, #284]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800124e:	2b08      	cmp	r3, #8
 8001250:	d11c      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001252:	4b44      	ldr	r3, [pc, #272]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125e:	4b41      	ldr	r3, [pc, #260]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e1c7      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b3b      	ldr	r3, [pc, #236]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4937      	ldr	r1, [pc, #220]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	e03a      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001294:	4b34      	ldr	r3, [pc, #208]	@ (8001368 <HAL_RCC_OscConfig+0x244>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fcb9 	bl	8000c10 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fcb5 	bl	8000c10 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1a8      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4925      	ldr	r1, [pc, #148]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <HAL_RCC_OscConfig+0x244>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fc98 	bl	8000c10 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fc94 	bl	8000c10 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e187      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d036      	beq.n	800137c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d016      	beq.n	8001344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_RCC_OscConfig+0x248>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff fc78 	bl	8000c10 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fc74 	bl	8000c10 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e167      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <HAL_RCC_OscConfig+0x240>)
 8001338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x200>
 8001342:	e01b      	b.n	800137c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_RCC_OscConfig+0x248>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134a:	f7ff fc61 	bl	8000c10 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	e00e      	b.n	8001370 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001352:	f7ff fc5d 	bl	8000c10 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d907      	bls.n	8001370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e150      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
 8001364:	40023800 	.word	0x40023800
 8001368:	42470000 	.word	0x42470000
 800136c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	4b88      	ldr	r3, [pc, #544]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1ea      	bne.n	8001352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8097 	beq.w	80014b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138e:	4b81      	ldr	r3, [pc, #516]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10f      	bne.n	80013ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b7d      	ldr	r3, [pc, #500]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ba:	4b77      	ldr	r3, [pc, #476]	@ (8001598 <HAL_RCC_OscConfig+0x474>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c6:	4b74      	ldr	r3, [pc, #464]	@ (8001598 <HAL_RCC_OscConfig+0x474>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a73      	ldr	r2, [pc, #460]	@ (8001598 <HAL_RCC_OscConfig+0x474>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fc1d 	bl	8000c10 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff fc19 	bl	8000c10 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e10c      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001598 <HAL_RCC_OscConfig+0x474>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x2ea>
 8001400:	4b64      	ldr	r3, [pc, #400]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001404:	4a63      	ldr	r2, [pc, #396]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	@ 0x70
 800140c:	e01c      	b.n	8001448 <HAL_RCC_OscConfig+0x324>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x30c>
 8001416:	4b5f      	ldr	r3, [pc, #380]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141a:	4a5e      	ldr	r2, [pc, #376]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6713      	str	r3, [r2, #112]	@ 0x70
 8001422:	4b5c      	ldr	r3, [pc, #368]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001426:	4a5b      	ldr	r2, [pc, #364]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	@ 0x70
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0x324>
 8001430:	4b58      	ldr	r3, [pc, #352]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001434:	4a57      	ldr	r2, [pc, #348]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	@ 0x70
 800143c:	4b55      	ldr	r3, [pc, #340]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001440:	4a54      	ldr	r2, [pc, #336]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d015      	beq.n	800147c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fbde 	bl	8000c10 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001456:	e00a      	b.n	800146e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff fbda 	bl	8000c10 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0cb      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146e:	4b49      	ldr	r3, [pc, #292]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0ee      	beq.n	8001458 <HAL_RCC_OscConfig+0x334>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff fbc8 	bl	8000c10 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fbc4 	bl	8000c10 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0b5      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149a:	4b3e      	ldr	r3, [pc, #248]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ee      	bne.n	8001484 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ac:	4b39      	ldr	r3, [pc, #228]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	4a38      	ldr	r2, [pc, #224]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80a1 	beq.w	8001604 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014c2:	4b34      	ldr	r3, [pc, #208]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d05c      	beq.n	8001588 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d141      	bne.n	800155a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b31      	ldr	r3, [pc, #196]	@ (800159c <HAL_RCC_OscConfig+0x478>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb98 	bl	8000c10 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fb94 	bl	8000c10 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e087      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	3b01      	subs	r3, #1
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	491b      	ldr	r1, [pc, #108]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <HAL_RCC_OscConfig+0x478>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fb6d 	bl	8000c10 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fb69 	bl	8000c10 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e05c      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x416>
 8001558:	e054      	b.n	8001604 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <HAL_RCC_OscConfig+0x478>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fb56 	bl	8000c10 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fb52 	bl	8000c10 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e045      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_RCC_OscConfig+0x470>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x444>
 8001586:	e03d      	b.n	8001604 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e038      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000
 800159c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <HAL_RCC_OscConfig+0x4ec>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d028      	beq.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d121      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d11a      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d8:	4293      	cmp	r3, r2
 80015da:	d111      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	3b01      	subs	r3, #1
 80015ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cc      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b68      	ldr	r3, [pc, #416]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d90c      	bls.n	8001650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b65      	ldr	r3, [pc, #404]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b63      	ldr	r3, [pc, #396]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b59      	ldr	r3, [pc, #356]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a58      	ldr	r2, [pc, #352]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001672:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b53      	ldr	r3, [pc, #332]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a52      	ldr	r2, [pc, #328]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800168a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b50      	ldr	r3, [pc, #320]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494d      	ldr	r1, [pc, #308]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d044      	beq.n	8001734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b47      	ldr	r3, [pc, #284]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b3f      	ldr	r3, [pc, #252]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e06f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e2:	4b3b      	ldr	r3, [pc, #236]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e067      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f2:	4b37      	ldr	r3, [pc, #220]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 0203 	bic.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4934      	ldr	r1, [pc, #208]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff fa84 	bl	8000c10 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff fa80 	bl	8000c10 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e04f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 020c 	and.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	429a      	cmp	r2, r3
 8001732:	d1eb      	bne.n	800170c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20c      	bcs.n	800175c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4916      	ldr	r1, [pc, #88]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001786:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490e      	ldr	r1, [pc, #56]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f821 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	490a      	ldr	r1, [pc, #40]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	5ccb      	ldrb	r3, [r1, r3]
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f8f2 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00
 80017d0:	40023800 	.word	0x40023800
 80017d4:	080064a0 	.word	0x080064a0
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	b090      	sub	sp, #64	@ 0x40
 80017e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f8:	4b59      	ldr	r3, [pc, #356]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d00d      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x40>
 8001804:	2b08      	cmp	r3, #8
 8001806:	f200 80a1 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x16c>
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x34>
 800180e:	2b04      	cmp	r3, #4
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x3a>
 8001812:	e09b      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x184>)
 8001816:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001818:	e09b      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800181a:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800181c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800181e:	e098      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001820:	4b4f      	ldr	r3, [pc, #316]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001828:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182a:	4b4d      	ldr	r3, [pc, #308]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d028      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001836:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	2200      	movs	r2, #0
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	627a      	str	r2, [r7, #36]	@ 0x24
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001848:	2100      	movs	r1, #0
 800184a:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800184c:	fb03 f201 	mul.w	r2, r3, r1
 8001850:	2300      	movs	r3, #0
 8001852:	fb00 f303 	mul.w	r3, r0, r3
 8001856:	4413      	add	r3, r2
 8001858:	4a43      	ldr	r2, [pc, #268]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800185a:	fba0 1202 	umull	r1, r2, r0, r2
 800185e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001860:	460a      	mov	r2, r1
 8001862:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001866:	4413      	add	r3, r2
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800186a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186c:	2200      	movs	r2, #0
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	61fa      	str	r2, [r7, #28]
 8001872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800187a:	f7fe fd01 	bl	8000280 <__aeabi_uldivmod>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4613      	mov	r3, r2
 8001884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001886:	e053      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001888:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	2200      	movs	r2, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	617a      	str	r2, [r7, #20]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800189a:	f04f 0b00 	mov.w	fp, #0
 800189e:	4652      	mov	r2, sl
 80018a0:	465b      	mov	r3, fp
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0159      	lsls	r1, r3, #5
 80018ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b0:	0150      	lsls	r0, r2, #5
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	ebb2 080a 	subs.w	r8, r2, sl
 80018ba:	eb63 090b 	sbc.w	r9, r3, fp
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018d2:	ebb2 0408 	subs.w	r4, r2, r8
 80018d6:	eb63 0509 	sbc.w	r5, r3, r9
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	00eb      	lsls	r3, r5, #3
 80018e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e8:	00e2      	lsls	r2, r4, #3
 80018ea:	4614      	mov	r4, r2
 80018ec:	461d      	mov	r5, r3
 80018ee:	eb14 030a 	adds.w	r3, r4, sl
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	eb45 030b 	adc.w	r3, r5, fp
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001906:	4629      	mov	r1, r5
 8001908:	028b      	lsls	r3, r1, #10
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001910:	4621      	mov	r1, r4
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800191a:	2200      	movs	r2, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	60fa      	str	r2, [r7, #12]
 8001920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001924:	f7fe fcac 	bl	8000280 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001940:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x184>)
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001954:	4618      	mov	r0, r3
 8001956:	3740      	adds	r7, #64	@ 0x40
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	017d7840 	.word	0x017d7840

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_RCC_GetHCLKFreq+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001988:	f7ff fff0 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	@ (80019a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	080064b0 	.word	0x080064b0

080019ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b0:	f7ff ffdc 	bl	800196c <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	0b5b      	lsrs	r3, r3, #13
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	@ (80019d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	080064b0 	.word	0x080064b0

080019d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	220f      	movs	r2, #15
 80019e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0203 	and.w	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a08:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a16:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <HAL_RCC_GetClockConfig+0x60>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0207 	and.w	r2, r3, #7
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	601a      	str	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e041      	b.n	8001ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f839 	bl	8001ad6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3304      	adds	r3, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f000 f9ca 	bl	8001e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d001      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e04e      	b.n	8001ba2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a23      	ldr	r2, [pc, #140]	@ (8001bb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d022      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b2e:	d01d      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d018      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1c      	ldr	r2, [pc, #112]	@ (8001bbc <HAL_TIM_Base_Start_IT+0xd0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00e      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d004      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x80>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d111      	bne.n	8001b90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d010      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8e:	e007      	b.n	8001ba0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40000400 	.word	0x40000400
 8001bb8:	40000800 	.word	0x40000800
 8001bbc:	40000c00 	.word	0x40000c00
 8001bc0:	40010400 	.word	0x40010400
 8001bc4:	40014000 	.word	0x40014000
 8001bc8:	40001800 	.word	0x40001800

08001bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d020      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01b      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0202 	mvn.w	r2, #2
 8001c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8dc 	bl	8001dd4 <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8ce 	bl	8001dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f8df 	bl	8001de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d020      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01b      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0204 	mvn.w	r2, #4
 8001c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2202      	movs	r2, #2
 8001c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8b6 	bl	8001dd4 <HAL_TIM_IC_CaptureCallback>
 8001c68:	e005      	b.n	8001c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8a8 	bl	8001dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8b9 	bl	8001de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d020      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0208 	mvn.w	r2, #8
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f890 	bl	8001dd4 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f882 	bl	8001dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f893 	bl	8001de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d020      	beq.n	8001d14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0210 	mvn.w	r2, #16
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f86a 	bl	8001dd4 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f85c 	bl	8001dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f86d 	bl	8001de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00c      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0201 	mvn.w	r2, #1
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f83a 	bl	8001dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00c      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f910 	bl	8001f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f83e 	bl	8001dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00c      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0220 	mvn.w	r2, #32
 8001d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8e2 	bl	8001f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a46      	ldr	r2, [pc, #280]	@ (8001f3c <TIM_Base_SetConfig+0x12c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d013      	beq.n	8001e50 <TIM_Base_SetConfig+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e2e:	d00f      	beq.n	8001e50 <TIM_Base_SetConfig+0x40>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a43      	ldr	r2, [pc, #268]	@ (8001f40 <TIM_Base_SetConfig+0x130>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00b      	beq.n	8001e50 <TIM_Base_SetConfig+0x40>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a42      	ldr	r2, [pc, #264]	@ (8001f44 <TIM_Base_SetConfig+0x134>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d007      	beq.n	8001e50 <TIM_Base_SetConfig+0x40>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a41      	ldr	r2, [pc, #260]	@ (8001f48 <TIM_Base_SetConfig+0x138>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d003      	beq.n	8001e50 <TIM_Base_SetConfig+0x40>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a40      	ldr	r2, [pc, #256]	@ (8001f4c <TIM_Base_SetConfig+0x13c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d108      	bne.n	8001e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a35      	ldr	r2, [pc, #212]	@ (8001f3c <TIM_Base_SetConfig+0x12c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02b      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e70:	d027      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a32      	ldr	r2, [pc, #200]	@ (8001f40 <TIM_Base_SetConfig+0x130>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d023      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a31      	ldr	r2, [pc, #196]	@ (8001f44 <TIM_Base_SetConfig+0x134>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a30      	ldr	r2, [pc, #192]	@ (8001f48 <TIM_Base_SetConfig+0x138>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01b      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f4c <TIM_Base_SetConfig+0x13c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d017      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a2e      	ldr	r2, [pc, #184]	@ (8001f50 <TIM_Base_SetConfig+0x140>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f54 <TIM_Base_SetConfig+0x144>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00f      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8001f58 <TIM_Base_SetConfig+0x148>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00b      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a2b      	ldr	r2, [pc, #172]	@ (8001f5c <TIM_Base_SetConfig+0x14c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8001f60 <TIM_Base_SetConfig+0x150>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d003      	beq.n	8001ec2 <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a29      	ldr	r2, [pc, #164]	@ (8001f64 <TIM_Base_SetConfig+0x154>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d108      	bne.n	8001ed4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <TIM_Base_SetConfig+0x12c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d003      	beq.n	8001f08 <TIM_Base_SetConfig+0xf8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <TIM_Base_SetConfig+0x13c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d103      	bne.n	8001f10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d105      	bne.n	8001f2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f023 0201 	bic.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	611a      	str	r2, [r3, #16]
  }
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40000800 	.word	0x40000800
 8001f48:	40000c00 	.word	0x40000c00
 8001f4c:	40010400 	.word	0x40010400
 8001f50:	40014000 	.word	0x40014000
 8001f54:	40014400 	.word	0x40014400
 8001f58:	40014800 	.word	0x40014800
 8001f5c:	40001800 	.word	0x40001800
 8001f60:	40001c00 	.word	0x40001c00
 8001f64:	40002000 	.word	0x40002000

08001f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e042      	b.n	8002028 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7fe fcac 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	@ 0x24
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fa09 	bl	80023ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	@ 0x28
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b20      	cmp	r3, #32
 800204e:	d175      	bne.n	800213c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_UART_Transmit+0x2c>
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e06e      	b.n	800213e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2221      	movs	r2, #33	@ 0x21
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800206e:	f7fe fdcf 	bl	8000c10 <HAL_GetTick>
 8002072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002088:	d108      	bne.n	800209c <HAL_UART_Transmit+0x6c>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d104      	bne.n	800209c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	e003      	b.n	80020a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020a4:	e02e      	b.n	8002104 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	@ 0x80
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f8df 	bl	8002274 <UART_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e03a      	b.n	800213e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10b      	bne.n	80020e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	3302      	adds	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e007      	b.n	80020f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3301      	adds	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1cb      	bne.n	80020a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2200      	movs	r2, #0
 8002116:	2140      	movs	r1, #64	@ 0x40
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f8ab 	bl	8002274 <UART_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e006      	b.n	800213e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b08a      	sub	sp, #40	@ 0x28
 800214a:	af02      	add	r7, sp, #8
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	f040 8081 	bne.w	800226a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_UART_Receive+0x2e>
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e079      	b.n	800226c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2222      	movs	r2, #34	@ 0x22
 8002182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800218c:	f7fe fd40 	bl	8000c10 <HAL_GetTick>
 8002190:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a6:	d108      	bne.n	80021ba <HAL_UART_Receive+0x74>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d104      	bne.n	80021ba <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	e003      	b.n	80021c2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021c2:	e047      	b.n	8002254 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2200      	movs	r2, #0
 80021cc:	2120      	movs	r1, #32
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f850 	bl	8002274 <UART_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e042      	b.n	800226c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10c      	bne.n	8002206 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	3302      	adds	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	e01f      	b.n	8002246 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800220e:	d007      	beq.n	8002220 <HAL_UART_Receive+0xda>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_UART_Receive+0xe8>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e008      	b.n	8002240 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800223a:	b2da      	uxtb	r2, r3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3301      	adds	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1b2      	bne.n	80021c4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
  }
}
 800226c:	4618      	mov	r0, r3
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002284:	e03b      	b.n	80022fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800228c:	d037      	beq.n	80022fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228e:	f7fe fcbf 	bl	8000c10 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	6a3a      	ldr	r2, [r7, #32]
 800229a:	429a      	cmp	r2, r3
 800229c:	d302      	bcc.n	80022a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e03a      	b.n	800231e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d023      	beq.n	80022fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b80      	cmp	r3, #128	@ 0x80
 80022ba:	d020      	beq.n	80022fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b40      	cmp	r3, #64	@ 0x40
 80022c0:	d01d      	beq.n	80022fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d116      	bne.n	80022fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f81d 	bl	8002326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2208      	movs	r2, #8
 80022f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00f      	b.n	800231e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4013      	ands	r3, r2
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	429a      	cmp	r2, r3
 800230c:	bf0c      	ite	eq
 800230e:	2301      	moveq	r3, #1
 8002310:	2300      	movne	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	429a      	cmp	r2, r3
 800231a:	d0b4      	beq.n	8002286 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002326:	b480      	push	{r7}
 8002328:	b095      	sub	sp, #84	@ 0x54
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	330c      	adds	r3, #12
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002338:	e853 3f00 	ldrex	r3, [r3]
 800233c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800233e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800234e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002350:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002354:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002356:	e841 2300 	strex	r3, r2, [r1]
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800235c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e5      	bne.n	800232e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3314      	adds	r3, #20
 8002368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	e853 3f00 	ldrex	r3, [r3]
 8002370:	61fb      	str	r3, [r7, #28]
   return(result);
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3314      	adds	r3, #20
 8002380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800238a:	e841 2300 	strex	r3, r2, [r1]
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1e5      	bne.n	8002362 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	2b01      	cmp	r3, #1
 800239c:	d119      	bne.n	80023d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	e853 3f00 	ldrex	r3, [r3]
 80023ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f023 0310 	bic.w	r3, r3, #16
 80023b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	330c      	adds	r3, #12
 80023bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023be:	61ba      	str	r2, [r7, #24]
 80023c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c2:	6979      	ldr	r1, [r7, #20]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	e841 2300 	strex	r3, r2, [r1]
 80023ca:	613b      	str	r3, [r7, #16]
   return(result);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1e5      	bne.n	800239e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023e0:	bf00      	nop
 80023e2:	3754      	adds	r7, #84	@ 0x54
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f0:	b0c0      	sub	sp, #256	@ 0x100
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002408:	68d9      	ldr	r1, [r3, #12]
 800240a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	ea40 0301 	orr.w	r3, r0, r1
 8002414:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	431a      	orrs	r2, r3
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	431a      	orrs	r2, r3
 800242c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002444:	f021 010c 	bic.w	r1, r1, #12
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002452:	430b      	orrs	r3, r1
 8002454:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002466:	6999      	ldr	r1, [r3, #24]
 8002468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	ea40 0301 	orr.w	r3, r0, r1
 8002472:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b8f      	ldr	r3, [pc, #572]	@ (80026b8 <UART_SetConfig+0x2cc>)
 800247c:	429a      	cmp	r2, r3
 800247e:	d005      	beq.n	800248c <UART_SetConfig+0xa0>
 8002480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b8d      	ldr	r3, [pc, #564]	@ (80026bc <UART_SetConfig+0x2d0>)
 8002488:	429a      	cmp	r2, r3
 800248a:	d104      	bne.n	8002496 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800248c:	f7ff fa8e 	bl	80019ac <HAL_RCC_GetPCLK2Freq>
 8002490:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002494:	e003      	b.n	800249e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002496:	f7ff fa75 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 800249a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024a8:	f040 810c 	bne.w	80026c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024b0:	2200      	movs	r2, #0
 80024b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80024b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80024ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80024be:	4622      	mov	r2, r4
 80024c0:	462b      	mov	r3, r5
 80024c2:	1891      	adds	r1, r2, r2
 80024c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80024c6:	415b      	adcs	r3, r3
 80024c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024ce:	4621      	mov	r1, r4
 80024d0:	eb12 0801 	adds.w	r8, r2, r1
 80024d4:	4629      	mov	r1, r5
 80024d6:	eb43 0901 	adc.w	r9, r3, r1
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ee:	4690      	mov	r8, r2
 80024f0:	4699      	mov	r9, r3
 80024f2:	4623      	mov	r3, r4
 80024f4:	eb18 0303 	adds.w	r3, r8, r3
 80024f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024fc:	462b      	mov	r3, r5
 80024fe:	eb49 0303 	adc.w	r3, r9, r3
 8002502:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002512:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002516:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800251a:	460b      	mov	r3, r1
 800251c:	18db      	adds	r3, r3, r3
 800251e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002520:	4613      	mov	r3, r2
 8002522:	eb42 0303 	adc.w	r3, r2, r3
 8002526:	657b      	str	r3, [r7, #84]	@ 0x54
 8002528:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800252c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002530:	f7fd fea6 	bl	8000280 <__aeabi_uldivmod>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4b61      	ldr	r3, [pc, #388]	@ (80026c0 <UART_SetConfig+0x2d4>)
 800253a:	fba3 2302 	umull	r2, r3, r3, r2
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	011c      	lsls	r4, r3, #4
 8002542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002546:	2200      	movs	r2, #0
 8002548:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800254c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002550:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002554:	4642      	mov	r2, r8
 8002556:	464b      	mov	r3, r9
 8002558:	1891      	adds	r1, r2, r2
 800255a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800255c:	415b      	adcs	r3, r3
 800255e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002560:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002564:	4641      	mov	r1, r8
 8002566:	eb12 0a01 	adds.w	sl, r2, r1
 800256a:	4649      	mov	r1, r9
 800256c:	eb43 0b01 	adc.w	fp, r3, r1
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800257c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002580:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002584:	4692      	mov	sl, r2
 8002586:	469b      	mov	fp, r3
 8002588:	4643      	mov	r3, r8
 800258a:	eb1a 0303 	adds.w	r3, sl, r3
 800258e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002592:	464b      	mov	r3, r9
 8002594:	eb4b 0303 	adc.w	r3, fp, r3
 8002598:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80025ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80025b0:	460b      	mov	r3, r1
 80025b2:	18db      	adds	r3, r3, r3
 80025b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80025b6:	4613      	mov	r3, r2
 80025b8:	eb42 0303 	adc.w	r3, r2, r3
 80025bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80025be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80025c6:	f7fd fe5b 	bl	8000280 <__aeabi_uldivmod>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <UART_SetConfig+0x2d4>)
 80025d2:	fba3 2301 	umull	r2, r3, r3, r1
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2264      	movs	r2, #100	@ 0x64
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	1acb      	subs	r3, r1, r3
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025e6:	4b36      	ldr	r3, [pc, #216]	@ (80026c0 <UART_SetConfig+0x2d4>)
 80025e8:	fba3 2302 	umull	r2, r3, r3, r2
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80025f4:	441c      	add	r4, r3
 80025f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025fa:	2200      	movs	r2, #0
 80025fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002600:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002604:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002608:	4642      	mov	r2, r8
 800260a:	464b      	mov	r3, r9
 800260c:	1891      	adds	r1, r2, r2
 800260e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002610:	415b      	adcs	r3, r3
 8002612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002614:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002618:	4641      	mov	r1, r8
 800261a:	1851      	adds	r1, r2, r1
 800261c:	6339      	str	r1, [r7, #48]	@ 0x30
 800261e:	4649      	mov	r1, r9
 8002620:	414b      	adcs	r3, r1
 8002622:	637b      	str	r3, [r7, #52]	@ 0x34
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002630:	4659      	mov	r1, fp
 8002632:	00cb      	lsls	r3, r1, #3
 8002634:	4651      	mov	r1, sl
 8002636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800263a:	4651      	mov	r1, sl
 800263c:	00ca      	lsls	r2, r1, #3
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	4603      	mov	r3, r0
 8002644:	4642      	mov	r2, r8
 8002646:	189b      	adds	r3, r3, r2
 8002648:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800264c:	464b      	mov	r3, r9
 800264e:	460a      	mov	r2, r1
 8002650:	eb42 0303 	adc.w	r3, r2, r3
 8002654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002664:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002668:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800266c:	460b      	mov	r3, r1
 800266e:	18db      	adds	r3, r3, r3
 8002670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002672:	4613      	mov	r3, r2
 8002674:	eb42 0303 	adc.w	r3, r2, r3
 8002678:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800267a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800267e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002682:	f7fd fdfd 	bl	8000280 <__aeabi_uldivmod>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <UART_SetConfig+0x2d4>)
 800268c:	fba3 1302 	umull	r1, r3, r3, r2
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	2164      	movs	r1, #100	@ 0x64
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	3332      	adds	r3, #50	@ 0x32
 800269e:	4a08      	ldr	r2, [pc, #32]	@ (80026c0 <UART_SetConfig+0x2d4>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	f003 0207 	and.w	r2, r3, #7
 80026aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4422      	add	r2, r4
 80026b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026b4:	e106      	b.n	80028c4 <UART_SetConfig+0x4d8>
 80026b6:	bf00      	nop
 80026b8:	40011000 	.word	0x40011000
 80026bc:	40011400 	.word	0x40011400
 80026c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026c8:	2200      	movs	r2, #0
 80026ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026d6:	4642      	mov	r2, r8
 80026d8:	464b      	mov	r3, r9
 80026da:	1891      	adds	r1, r2, r2
 80026dc:	6239      	str	r1, [r7, #32]
 80026de:	415b      	adcs	r3, r3
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026e6:	4641      	mov	r1, r8
 80026e8:	1854      	adds	r4, r2, r1
 80026ea:	4649      	mov	r1, r9
 80026ec:	eb43 0501 	adc.w	r5, r3, r1
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	00eb      	lsls	r3, r5, #3
 80026fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fe:	00e2      	lsls	r2, r4, #3
 8002700:	4614      	mov	r4, r2
 8002702:	461d      	mov	r5, r3
 8002704:	4643      	mov	r3, r8
 8002706:	18e3      	adds	r3, r4, r3
 8002708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800270c:	464b      	mov	r3, r9
 800270e:	eb45 0303 	adc.w	r3, r5, r3
 8002712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002722:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002732:	4629      	mov	r1, r5
 8002734:	008b      	lsls	r3, r1, #2
 8002736:	4621      	mov	r1, r4
 8002738:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800273c:	4621      	mov	r1, r4
 800273e:	008a      	lsls	r2, r1, #2
 8002740:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002744:	f7fd fd9c 	bl	8000280 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4b60      	ldr	r3, [pc, #384]	@ (80028d0 <UART_SetConfig+0x4e4>)
 800274e:	fba3 2302 	umull	r2, r3, r3, r2
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	011c      	lsls	r4, r3, #4
 8002756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800275a:	2200      	movs	r2, #0
 800275c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002760:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002764:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002768:	4642      	mov	r2, r8
 800276a:	464b      	mov	r3, r9
 800276c:	1891      	adds	r1, r2, r2
 800276e:	61b9      	str	r1, [r7, #24]
 8002770:	415b      	adcs	r3, r3
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002778:	4641      	mov	r1, r8
 800277a:	1851      	adds	r1, r2, r1
 800277c:	6139      	str	r1, [r7, #16]
 800277e:	4649      	mov	r1, r9
 8002780:	414b      	adcs	r3, r1
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002790:	4659      	mov	r1, fp
 8002792:	00cb      	lsls	r3, r1, #3
 8002794:	4651      	mov	r1, sl
 8002796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800279a:	4651      	mov	r1, sl
 800279c:	00ca      	lsls	r2, r1, #3
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	4603      	mov	r3, r0
 80027a4:	4642      	mov	r2, r8
 80027a6:	189b      	adds	r3, r3, r2
 80027a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027ac:	464b      	mov	r3, r9
 80027ae:	460a      	mov	r2, r1
 80027b0:	eb42 0303 	adc.w	r3, r2, r3
 80027b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80027d0:	4649      	mov	r1, r9
 80027d2:	008b      	lsls	r3, r1, #2
 80027d4:	4641      	mov	r1, r8
 80027d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027da:	4641      	mov	r1, r8
 80027dc:	008a      	lsls	r2, r1, #2
 80027de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027e2:	f7fd fd4d 	bl	8000280 <__aeabi_uldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	4b38      	ldr	r3, [pc, #224]	@ (80028d0 <UART_SetConfig+0x4e4>)
 80027ee:	fba3 2301 	umull	r2, r3, r3, r1
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2264      	movs	r2, #100	@ 0x64
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	1acb      	subs	r3, r1, r3
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	3332      	adds	r3, #50	@ 0x32
 8002800:	4a33      	ldr	r2, [pc, #204]	@ (80028d0 <UART_SetConfig+0x4e4>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800280c:	441c      	add	r4, r3
 800280e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002812:	2200      	movs	r2, #0
 8002814:	673b      	str	r3, [r7, #112]	@ 0x70
 8002816:	677a      	str	r2, [r7, #116]	@ 0x74
 8002818:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800281c:	4642      	mov	r2, r8
 800281e:	464b      	mov	r3, r9
 8002820:	1891      	adds	r1, r2, r2
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	415b      	adcs	r3, r3
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800282c:	4641      	mov	r1, r8
 800282e:	1851      	adds	r1, r2, r1
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	4649      	mov	r1, r9
 8002834:	414b      	adcs	r3, r1
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002844:	4659      	mov	r1, fp
 8002846:	00cb      	lsls	r3, r1, #3
 8002848:	4651      	mov	r1, sl
 800284a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284e:	4651      	mov	r1, sl
 8002850:	00ca      	lsls	r2, r1, #3
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	4603      	mov	r3, r0
 8002858:	4642      	mov	r2, r8
 800285a:	189b      	adds	r3, r3, r2
 800285c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800285e:	464b      	mov	r3, r9
 8002860:	460a      	mov	r2, r1
 8002862:	eb42 0303 	adc.w	r3, r2, r3
 8002866:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	663b      	str	r3, [r7, #96]	@ 0x60
 8002872:	667a      	str	r2, [r7, #100]	@ 0x64
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002880:	4649      	mov	r1, r9
 8002882:	008b      	lsls	r3, r1, #2
 8002884:	4641      	mov	r1, r8
 8002886:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800288a:	4641      	mov	r1, r8
 800288c:	008a      	lsls	r2, r1, #2
 800288e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002892:	f7fd fcf5 	bl	8000280 <__aeabi_uldivmod>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <UART_SetConfig+0x4e4>)
 800289c:	fba3 1302 	umull	r1, r3, r3, r2
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	2164      	movs	r1, #100	@ 0x64
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	3332      	adds	r3, #50	@ 0x32
 80028ae:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <UART_SetConfig+0x4e4>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	f003 020f 	and.w	r2, r3, #15
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4422      	add	r2, r4
 80028c2:	609a      	str	r2, [r3, #8]
}
 80028c4:	bf00      	nop
 80028c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80028ca:	46bd      	mov	sp, r7
 80028cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d0:	51eb851f 	.word	0x51eb851f

080028d4 <__NVIC_SetPriority>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	@ (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	@ (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800292c:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <SysTick_Handler+0x1c>)
 800292e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002930:	f001 fedc 	bl	80046ec <xTaskGetSchedulerState>
 8002934:	4603      	mov	r3, r0
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800293a:	f002 fdd5 	bl	80054e8 <xPortSysTickHandler>
  }
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800294c:	2100      	movs	r1, #0
 800294e:	f06f 0004 	mvn.w	r0, #4
 8002952:	f7ff ffbf 	bl	80028d4 <__NVIC_SetPriority>
#endif
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002962:	f3ef 8305 	mrs	r3, IPSR
 8002966:	603b      	str	r3, [r7, #0]
  return(result);
 8002968:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800296e:	f06f 0305 	mvn.w	r3, #5
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	e00c      	b.n	8002990 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002976:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <osKernelInitialize+0x44>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <osKernelInitialize+0x44>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002984:	2300      	movs	r3, #0
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	e002      	b.n	8002990 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800298e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002990:	687b      	ldr	r3, [r7, #4]
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000114 	.word	0x20000114

080029a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029aa:	f3ef 8305 	mrs	r3, IPSR
 80029ae:	603b      	str	r3, [r7, #0]
  return(result);
 80029b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <osKernelStart+0x1a>
    stat = osErrorISR;
 80029b6:	f06f 0305 	mvn.w	r3, #5
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	e010      	b.n	80029e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80029be:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <osKernelStart+0x48>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d109      	bne.n	80029da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80029c6:	f7ff ffbf 	bl	8002948 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <osKernelStart+0x48>)
 80029cc:	2202      	movs	r2, #2
 80029ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80029d0:	f001 fa28 	bl	8003e24 <vTaskStartScheduler>
      stat = osOK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	e002      	b.n	80029e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029e0:	687b      	ldr	r3, [r7, #4]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000114 	.word	0x20000114

080029f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	@ 0x38
 80029f4:	af04      	add	r7, sp, #16
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a00:	f3ef 8305 	mrs	r3, IPSR
 8002a04:	617b      	str	r3, [r7, #20]
  return(result);
 8002a06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d17e      	bne.n	8002b0a <osThreadNew+0x11a>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d07b      	beq.n	8002b0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002a16:	2318      	movs	r3, #24
 8002a18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d045      	beq.n	8002ab6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <osThreadNew+0x48>
        name = attr->name;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <osThreadNew+0x6e>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b38      	cmp	r3, #56	@ 0x38
 8002a50:	d805      	bhi.n	8002a5e <osThreadNew+0x6e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <osThreadNew+0x72>
        return (NULL);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e054      	b.n	8002b0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00e      	beq.n	8002a98 <osThreadNew+0xa8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2ba7      	cmp	r3, #167	@ 0xa7
 8002a80:	d90a      	bls.n	8002a98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <osThreadNew+0xa8>
        mem = 1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	e010      	b.n	8002aba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10c      	bne.n	8002aba <osThreadNew+0xca>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d108      	bne.n	8002aba <osThreadNew+0xca>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d104      	bne.n	8002aba <osThreadNew+0xca>
          mem = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	e001      	b.n	8002aba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d110      	bne.n	8002ae2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ac8:	9202      	str	r2, [sp, #8]
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	6a3a      	ldr	r2, [r7, #32]
 8002ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 ffb0 	bl	8003a3c <xTaskCreateStatic>
 8002adc:	4603      	mov	r3, r0
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	e013      	b.n	8002b0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d110      	bne.n	8002b0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fffe 	bl	8003afc <xTaskCreate>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <osThreadNew+0x11a>
            hTask = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b0a:	693b      	ldr	r3, [r7, #16]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3728      	adds	r7, #40	@ 0x28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b1c:	f3ef 8305 	mrs	r3, IPSR
 8002b20:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <osDelay+0x1c>
    stat = osErrorISR;
 8002b28:	f06f 0305 	mvn.w	r3, #5
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e007      	b.n	8002b40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f001 f93c 	bl	8003db8 <vTaskDelay>
    }
  }

  return (stat);
 8002b40:	68fb      	ldr	r3, [r7, #12]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4a06      	ldr	r2, [pc, #24]	@ (8002b7c <vApplicationGetIdleTaskMemory+0x30>)
 8002b62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2280      	movs	r2, #128	@ 0x80
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000118 	.word	0x20000118
 8002b7c:	200001c0 	.word	0x200001c0

08002b80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a07      	ldr	r2, [pc, #28]	@ (8002bac <vApplicationGetTimerTaskMemory+0x2c>)
 8002b90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4a06      	ldr	r2, [pc, #24]	@ (8002bb0 <vApplicationGetTimerTaskMemory+0x30>)
 8002b96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b9e:	601a      	str	r2, [r3, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	200003c0 	.word	0x200003c0
 8002bb0:	20000468 	.word	0x20000468

08002bb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f103 0208 	add.w	r2, r3, #8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f103 0208 	add.w	r2, r3, #8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f103 0208 	add.w	r2, r3, #8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c6c:	d103      	bne.n	8002c76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e00c      	b.n	8002c90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3308      	adds	r3, #8
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e002      	b.n	8002c84 <vListInsert+0x2e>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d2f6      	bcs.n	8002c7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	601a      	str	r2, [r3, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6892      	ldr	r2, [r2, #8]
 8002cde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6852      	ldr	r2, [r2, #4]
 8002ce8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d103      	bne.n	8002cfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	1e5a      	subs	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d48:	f002 fb3e 	bl	80053c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	441a      	add	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	68f9      	ldr	r1, [r7, #12]
 8002d7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	441a      	add	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	22ff      	movs	r2, #255	@ 0xff
 8002d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	22ff      	movs	r2, #255	@ 0xff
 8002d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d114      	bne.n	8002dc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01a      	beq.n	8002ddc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3310      	adds	r3, #16
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 fad8 	bl	8004360 <xTaskRemoveFromEventList>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d012      	beq.n	8002ddc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002db6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <xQueueGenericReset+0xd0>)
 8002db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	e009      	b.n	8002ddc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3310      	adds	r3, #16
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fef1 	bl	8002bb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3324      	adds	r3, #36	@ 0x24
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff feec 	bl	8002bb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ddc:	f002 fb26 	bl	800542c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002de0:	2301      	movs	r3, #1
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	e000ed04 	.word	0xe000ed04

08002df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08e      	sub	sp, #56	@ 0x38
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e16:	bf00      	nop
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	e7fd      	b.n	8002e36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <xQueueGenericCreateStatic+0x56>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <xQueueGenericCreateStatic+0x5a>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <xQueueGenericCreateStatic+0x5c>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	623b      	str	r3, [r7, #32]
}
 8002e62:	bf00      	nop
 8002e64:	bf00      	nop
 8002e66:	e7fd      	b.n	8002e64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <xQueueGenericCreateStatic+0x84>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <xQueueGenericCreateStatic+0x88>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <xQueueGenericCreateStatic+0x8a>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	61fb      	str	r3, [r7, #28]
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	e7fd      	b.n	8002e92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e96:	2350      	movs	r3, #80	@ 0x50
 8002e98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b50      	cmp	r3, #80	@ 0x50
 8002e9e:	d00b      	beq.n	8002eb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	61bb      	str	r3, [r7, #24]
}
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002eb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ecc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f840 	bl	8002f60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3730      	adds	r7, #48	@ 0x30
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b08a      	sub	sp, #40	@ 0x28
 8002eee:	af02      	add	r7, sp, #8
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	613b      	str	r3, [r7, #16]
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	e7fd      	b.n	8002f12 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3350      	adds	r3, #80	@ 0x50
 8002f24:	4618      	mov	r0, r3
 8002f26:	f002 fb71 	bl	800560c <pvPortMalloc>
 8002f2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d011      	beq.n	8002f56 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3350      	adds	r3, #80	@ 0x50
 8002f3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f44:	79fa      	ldrb	r2, [r7, #7]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f805 	bl	8002f60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f56:	69bb      	ldr	r3, [r7, #24]
	}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3720      	adds	r7, #32
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d103      	bne.n	8002f7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e002      	b.n	8002f82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f8e:	2101      	movs	r1, #1
 8002f90:	69b8      	ldr	r0, [r7, #24]
 8002f92:	f7ff fec3 	bl	8002d1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00e      	beq.n	8002fd2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f81d 	bl	800300c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6939      	ldr	r1, [r7, #16]
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	f7ff ff79 	bl	8002eea <xQueueGenericCreate>
 8002ff8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff ffd3 	bl	8002fa6 <prvInitialiseMutex>

		return xNewQueue;
 8003000:	68fb      	ldr	r3, [r7, #12]
	}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08e      	sub	sp, #56	@ 0x38
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800301a:	2300      	movs	r3, #0
 800301c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <xQueueGenericSend+0x34>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800303a:	bf00      	nop
 800303c:	bf00      	nop
 800303e:	e7fd      	b.n	800303c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <xQueueGenericSend+0x42>
 8003046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <xQueueGenericSend+0x46>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <xQueueGenericSend+0x48>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <xQueueGenericSend+0x64>
	__asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800306a:	bf00      	nop
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d103      	bne.n	800307e <xQueueGenericSend+0x72>
 8003076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <xQueueGenericSend+0x76>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <xQueueGenericSend+0x78>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <xQueueGenericSend+0x94>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	623b      	str	r3, [r7, #32]
}
 800309a:	bf00      	nop
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030a0:	f001 fb24 	bl	80046ec <xTaskGetSchedulerState>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d102      	bne.n	80030b0 <xQueueGenericSend+0xa4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <xQueueGenericSend+0xa8>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <xQueueGenericSend+0xaa>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <xQueueGenericSend+0xc6>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	61fb      	str	r3, [r7, #28]
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	e7fd      	b.n	80030ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030d2:	f002 f979 	bl	80053c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030de:	429a      	cmp	r2, r3
 80030e0:	d302      	bcc.n	80030e8 <xQueueGenericSend+0xdc>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d129      	bne.n	800313c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030ee:	f000 fb37 	bl	8003760 <prvCopyDataToQueue>
 80030f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fe:	3324      	adds	r3, #36	@ 0x24
 8003100:	4618      	mov	r0, r3
 8003102:	f001 f92d 	bl	8004360 <xTaskRemoveFromEventList>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d013      	beq.n	8003134 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800310c:	4b3f      	ldr	r3, [pc, #252]	@ (800320c <xQueueGenericSend+0x200>)
 800310e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	e00a      	b.n	8003134 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800311e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003124:	4b39      	ldr	r3, [pc, #228]	@ (800320c <xQueueGenericSend+0x200>)
 8003126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003134:	f002 f97a 	bl	800542c <vPortExitCritical>
				return pdPASS;
 8003138:	2301      	movs	r3, #1
 800313a:	e063      	b.n	8003204 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003142:	f002 f973 	bl	800542c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003146:	2300      	movs	r3, #0
 8003148:	e05c      	b.n	8003204 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800314a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	4618      	mov	r0, r3
 8003156:	f001 f967 	bl	8004428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800315a:	2301      	movs	r3, #1
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800315e:	f002 f965 	bl	800542c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003162:	f000 fecf 	bl	8003f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003166:	f002 f92f 	bl	80053c8 <vPortEnterCritical>
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003170:	b25b      	sxtb	r3, r3
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003176:	d103      	bne.n	8003180 <xQueueGenericSend+0x174>
 8003178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003182:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003186:	b25b      	sxtb	r3, r3
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800318c:	d103      	bne.n	8003196 <xQueueGenericSend+0x18a>
 800318e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003196:	f002 f949 	bl	800542c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800319a:	1d3a      	adds	r2, r7, #4
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 f956 	bl	8004454 <xTaskCheckForTimeOut>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d124      	bne.n	80031f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031b0:	f000 fbce 	bl	8003950 <prvIsQueueFull>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d018      	beq.n	80031ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031bc:	3310      	adds	r3, #16
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f87a 	bl	80042bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031ca:	f000 fb59 	bl	8003880 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031ce:	f000 fea7 	bl	8003f20 <xTaskResumeAll>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f47f af7c 	bne.w	80030d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80031da:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <xQueueGenericSend+0x200>)
 80031dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	e772      	b.n	80030d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031ee:	f000 fb47 	bl	8003880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031f2:	f000 fe95 	bl	8003f20 <xTaskResumeAll>
 80031f6:	e76c      	b.n	80030d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031fa:	f000 fb41 	bl	8003880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031fe:	f000 fe8f 	bl	8003f20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003202:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003204:	4618      	mov	r0, r3
 8003206:	3738      	adds	r7, #56	@ 0x38
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b090      	sub	sp, #64	@ 0x40
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <xQueueGenericSendFromISR+0x3e>
 8003246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <xQueueGenericSendFromISR+0x42>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <xQueueGenericSendFromISR+0x44>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d103      	bne.n	800327e <xQueueGenericSendFromISR+0x6e>
 8003276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <xQueueGenericSendFromISR+0x72>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <xQueueGenericSendFromISR+0x74>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	623b      	str	r3, [r7, #32]
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032a0:	f002 f972 	bl	8005588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032a4:	f3ef 8211 	mrs	r2, BASEPRI
 80032a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	61fa      	str	r2, [r7, #28]
 80032ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d302      	bcc.n	80032d2 <xQueueGenericSendFromISR+0xc2>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d12f      	bne.n	8003332 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032e8:	f000 fa3a 	bl	8003760 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032f4:	d112      	bne.n	800331c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003300:	3324      	adds	r3, #36	@ 0x24
 8003302:	4618      	mov	r0, r3
 8003304:	f001 f82c 	bl	8004360 <xTaskRemoveFromEventList>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00e      	beq.n	800332c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00b      	beq.n	800332c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e007      	b.n	800332c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800331c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003320:	3301      	adds	r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	b25a      	sxtb	r2, r3
 8003326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800332c:	2301      	movs	r3, #1
 800332e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003330:	e001      	b.n	8003336 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003332:	2300      	movs	r3, #0
 8003334:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003338:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003340:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003344:	4618      	mov	r0, r3
 8003346:	3740      	adds	r7, #64	@ 0x40
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	@ 0x30
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003358:	2300      	movs	r3, #0
 800335a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10b      	bne.n	800337e <xQueueReceive+0x32>
	__asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	623b      	str	r3, [r7, #32]
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	e7fd      	b.n	800337a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d103      	bne.n	800338c <xQueueReceive+0x40>
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <xQueueReceive+0x44>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <xQueueReceive+0x46>
 8003390:	2300      	movs	r3, #0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10b      	bne.n	80033ae <xQueueReceive+0x62>
	__asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	61fb      	str	r3, [r7, #28]
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	e7fd      	b.n	80033aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ae:	f001 f99d 	bl	80046ec <xTaskGetSchedulerState>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <xQueueReceive+0x72>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <xQueueReceive+0x76>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <xQueueReceive+0x78>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <xQueueReceive+0x94>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	61bb      	str	r3, [r7, #24]
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	e7fd      	b.n	80033dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033e0:	f001 fff2 	bl	80053c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01f      	beq.n	8003430 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033f4:	f000 fa1e 	bl	8003834 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	1e5a      	subs	r2, r3, #1
 80033fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00f      	beq.n	8003428 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340a:	3310      	adds	r3, #16
 800340c:	4618      	mov	r0, r3
 800340e:	f000 ffa7 	bl	8004360 <xTaskRemoveFromEventList>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003418:	4b3c      	ldr	r3, [pc, #240]	@ (800350c <xQueueReceive+0x1c0>)
 800341a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003428:	f002 f800 	bl	800542c <vPortExitCritical>
				return pdPASS;
 800342c:	2301      	movs	r3, #1
 800342e:	e069      	b.n	8003504 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003436:	f001 fff9 	bl	800542c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800343a:	2300      	movs	r3, #0
 800343c:	e062      	b.n	8003504 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d106      	bne.n	8003452 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	4618      	mov	r0, r3
 800344a:	f000 ffed 	bl	8004428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800344e:	2301      	movs	r3, #1
 8003450:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003452:	f001 ffeb 	bl	800542c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003456:	f000 fd55 	bl	8003f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800345a:	f001 ffb5 	bl	80053c8 <vPortEnterCritical>
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003464:	b25b      	sxtb	r3, r3
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800346a:	d103      	bne.n	8003474 <xQueueReceive+0x128>
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003476:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800347a:	b25b      	sxtb	r3, r3
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003480:	d103      	bne.n	800348a <xQueueReceive+0x13e>
 8003482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800348a:	f001 ffcf 	bl	800542c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800348e:	1d3a      	adds	r2, r7, #4
 8003490:	f107 0310 	add.w	r3, r7, #16
 8003494:	4611      	mov	r1, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f000 ffdc 	bl	8004454 <xTaskCheckForTimeOut>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d123      	bne.n	80034ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034a4:	f000 fa3e 	bl	8003924 <prvIsQueueEmpty>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d017      	beq.n	80034de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b0:	3324      	adds	r3, #36	@ 0x24
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 ff00 	bl	80042bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034be:	f000 f9df 	bl	8003880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034c2:	f000 fd2d 	bl	8003f20 <xTaskResumeAll>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d189      	bne.n	80033e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80034cc:	4b0f      	ldr	r3, [pc, #60]	@ (800350c <xQueueReceive+0x1c0>)
 80034ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	e780      	b.n	80033e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034e0:	f000 f9ce 	bl	8003880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034e4:	f000 fd1c 	bl	8003f20 <xTaskResumeAll>
 80034e8:	e77a      	b.n	80033e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034ec:	f000 f9c8 	bl	8003880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034f0:	f000 fd16 	bl	8003f20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034f6:	f000 fa15 	bl	8003924 <prvIsQueueEmpty>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f43f af6f 	beq.w	80033e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003502:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003504:	4618      	mov	r0, r3
 8003506:	3730      	adds	r7, #48	@ 0x30
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	e000ed04 	.word	0xe000ed04

08003510 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08e      	sub	sp, #56	@ 0x38
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003522:	2300      	movs	r3, #0
 8003524:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	623b      	str	r3, [r7, #32]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	61fb      	str	r3, [r7, #28]
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003564:	f001 f8c2 	bl	80046ec <xTaskGetSchedulerState>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <xQueueSemaphoreTake+0x64>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <xQueueSemaphoreTake+0x68>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <xQueueSemaphoreTake+0x6a>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	61bb      	str	r3, [r7, #24]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003596:	f001 ff17 	bl	80053c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80035a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d024      	beq.n	80035f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80035a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a8:	1e5a      	subs	r2, r3, #1
 80035aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80035b6:	f001 fa13 	bl	80049e0 <pvTaskIncrementMutexHeldCount>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00f      	beq.n	80035e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ca:	3310      	adds	r3, #16
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fec7 	bl	8004360 <xTaskRemoveFromEventList>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035d8:	4b54      	ldr	r3, [pc, #336]	@ (800372c <xQueueSemaphoreTake+0x21c>)
 80035da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035e8:	f001 ff20 	bl	800542c <vPortExitCritical>
				return pdPASS;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e098      	b.n	8003722 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d112      	bne.n	800361c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80035f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	617b      	str	r3, [r7, #20]
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003614:	f001 ff0a 	bl	800542c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003618:	2300      	movs	r3, #0
 800361a:	e082      	b.n	8003722 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800361c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003622:	f107 030c 	add.w	r3, r7, #12
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fefe 	bl	8004428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800362c:	2301      	movs	r3, #1
 800362e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003630:	f001 fefc 	bl	800542c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003634:	f000 fc66 	bl	8003f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003638:	f001 fec6 	bl	80053c8 <vPortEnterCritical>
 800363c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003642:	b25b      	sxtb	r3, r3
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003648:	d103      	bne.n	8003652 <xQueueSemaphoreTake+0x142>
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003658:	b25b      	sxtb	r3, r3
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800365e:	d103      	bne.n	8003668 <xQueueSemaphoreTake+0x158>
 8003660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003668:	f001 fee0 	bl	800542c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800366c:	463a      	mov	r2, r7
 800366e:	f107 030c 	add.w	r3, r7, #12
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f000 feed 	bl	8004454 <xTaskCheckForTimeOut>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d132      	bne.n	80036e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003682:	f000 f94f 	bl	8003924 <prvIsQueueEmpty>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d026      	beq.n	80036da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003694:	f001 fe98 	bl	80053c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4618      	mov	r0, r3
 800369e:	f001 f843 	bl	8004728 <xTaskPriorityInherit>
 80036a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80036a4:	f001 fec2 	bl	800542c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	3324      	adds	r3, #36	@ 0x24
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fe03 	bl	80042bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036b8:	f000 f8e2 	bl	8003880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036bc:	f000 fc30 	bl	8003f20 <xTaskResumeAll>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f47f af67 	bne.w	8003596 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80036c8:	4b18      	ldr	r3, [pc, #96]	@ (800372c <xQueueSemaphoreTake+0x21c>)
 80036ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	e75d      	b.n	8003596 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80036da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036dc:	f000 f8d0 	bl	8003880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036e0:	f000 fc1e 	bl	8003f20 <xTaskResumeAll>
 80036e4:	e757      	b.n	8003596 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80036e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036e8:	f000 f8ca 	bl	8003880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036ec:	f000 fc18 	bl	8003f20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036f2:	f000 f917 	bl	8003924 <prvIsQueueEmpty>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f43f af4c 	beq.w	8003596 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003704:	f001 fe60 	bl	80053c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003708:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800370a:	f000 f811 	bl	8003730 <prvGetDisinheritPriorityAfterTimeout>
 800370e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f8de 	bl	80048d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800371c:	f001 fe86 	bl	800542c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003722:	4618      	mov	r0, r3
 8003724:	3738      	adds	r7, #56	@ 0x38
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	e000ed04 	.word	0xe000ed04

08003730 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e001      	b.n	8003752 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003752:	68fb      	ldr	r3, [r7, #12]
	}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003774:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10d      	bne.n	800379a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d14d      	bne.n	8003822 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	4618      	mov	r0, r3
 800378c:	f001 f834 	bl	80047f8 <xTaskPriorityDisinherit>
 8003790:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	e043      	b.n	8003822 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d119      	bne.n	80037d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6858      	ldr	r0, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	461a      	mov	r2, r3
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	f002 f9e6 	bl	8005b7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	441a      	add	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d32b      	bcc.n	8003822 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	e026      	b.n	8003822 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	68d8      	ldr	r0, [r3, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	461a      	mov	r2, r3
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	f002 f9cc 	bl	8005b7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	425b      	negs	r3, r3
 80037ee:	441a      	add	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d207      	bcs.n	8003810 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	425b      	negs	r3, r3
 800380a:	441a      	add	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d105      	bne.n	8003822 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	3b01      	subs	r3, #1
 8003820:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800382a:	697b      	ldr	r3, [r7, #20]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d018      	beq.n	8003878 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	441a      	add	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	d303      	bcc.n	8003868 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68d9      	ldr	r1, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	461a      	mov	r2, r3
 8003872:	6838      	ldr	r0, [r7, #0]
 8003874:	f002 f982 	bl	8005b7c <memcpy>
	}
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003888:	f001 fd9e 	bl	80053c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003892:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003894:	e011      	b.n	80038ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	d012      	beq.n	80038c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3324      	adds	r3, #36	@ 0x24
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fd5c 	bl	8004360 <xTaskRemoveFromEventList>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038ae:	f000 fe35 	bl	800451c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	dce9      	bgt.n	8003896 <prvUnlockQueue+0x16>
 80038c2:	e000      	b.n	80038c6 <prvUnlockQueue+0x46>
					break;
 80038c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	22ff      	movs	r2, #255	@ 0xff
 80038ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80038ce:	f001 fdad 	bl	800542c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038d2:	f001 fd79 	bl	80053c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038de:	e011      	b.n	8003904 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3310      	adds	r3, #16
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fd37 	bl	8004360 <xTaskRemoveFromEventList>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038f8:	f000 fe10 	bl	800451c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038fc:	7bbb      	ldrb	r3, [r7, #14]
 80038fe:	3b01      	subs	r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003908:	2b00      	cmp	r3, #0
 800390a:	dce9      	bgt.n	80038e0 <prvUnlockQueue+0x60>
 800390c:	e000      	b.n	8003910 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800390e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	22ff      	movs	r2, #255	@ 0xff
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003918:	f001 fd88 	bl	800542c <vPortExitCritical>
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800392c:	f001 fd4c 	bl	80053c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003938:	2301      	movs	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e001      	b.n	8003942 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003942:	f001 fd73 	bl	800542c <vPortExitCritical>

	return xReturn;
 8003946:	68fb      	ldr	r3, [r7, #12]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003958:	f001 fd36 	bl	80053c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003964:	429a      	cmp	r2, r3
 8003966:	d102      	bne.n	800396e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003968:	2301      	movs	r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e001      	b.n	8003972 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003972:	f001 fd5b 	bl	800542c <vPortExitCritical>

	return xReturn;
 8003976:	68fb      	ldr	r3, [r7, #12]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e014      	b.n	80039ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003990:	4a0f      	ldr	r2, [pc, #60]	@ (80039d0 <vQueueAddToRegistry+0x50>)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800399c:	490c      	ldr	r1, [pc, #48]	@ (80039d0 <vQueueAddToRegistry+0x50>)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <vQueueAddToRegistry+0x50>)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039b2:	e006      	b.n	80039c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b07      	cmp	r3, #7
 80039be:	d9e7      	bls.n	8003990 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000868 	.word	0x20000868

080039d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039e4:	f001 fcf0 	bl	80053c8 <vPortEnterCritical>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039ee:	b25b      	sxtb	r3, r3
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039f4:	d103      	bne.n	80039fe <vQueueWaitForMessageRestricted+0x2a>
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a04:	b25b      	sxtb	r3, r3
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a0a:	d103      	bne.n	8003a14 <vQueueWaitForMessageRestricted+0x40>
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a14:	f001 fd0a 	bl	800542c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	3324      	adds	r3, #36	@ 0x24
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fc6d 	bl	8004308 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a2e:	6978      	ldr	r0, [r7, #20]
 8003a30:	f7ff ff26 	bl	8003880 <prvUnlockQueue>
	}
 8003a34:	bf00      	nop
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08e      	sub	sp, #56	@ 0x38
 8003a40:	af04      	add	r7, sp, #16
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	623b      	str	r3, [r7, #32]
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	e7fd      	b.n	8003a64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10b      	bne.n	8003a86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	61fb      	str	r3, [r7, #28]
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	e7fd      	b.n	8003a82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a86:	23a8      	movs	r3, #168	@ 0xa8
 8003a88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2ba8      	cmp	r3, #168	@ 0xa8
 8003a8e:	d00b      	beq.n	8003aa8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	61bb      	str	r3, [r7, #24]
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003aa8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01e      	beq.n	8003aee <xTaskCreateStatic+0xb2>
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01b      	beq.n	8003aee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9303      	str	r3, [sp, #12]
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	9302      	str	r3, [sp, #8]
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f851 	bl	8003b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ae6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ae8:	f000 f8f6 	bl	8003cd8 <prvAddNewTaskToReadyList>
 8003aec:	e001      	b.n	8003af2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003af2:	697b      	ldr	r3, [r7, #20]
	}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	@ 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	@ 0x30
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fd7b 	bl	800560c <pvPortMalloc>
 8003b16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00e      	beq.n	8003b3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b1e:	20a8      	movs	r0, #168	@ 0xa8
 8003b20:	f001 fd74 	bl	800560c <pvPortMalloc>
 8003b24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b32:	e005      	b.n	8003b40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f001 fe37 	bl	80057a8 <vPortFree>
 8003b3a:	e001      	b.n	8003b40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d017      	beq.n	8003b76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9303      	str	r3, [sp, #12]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	9302      	str	r3, [sp, #8]
 8003b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f80f 	bl	8003b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b6a:	69f8      	ldr	r0, [r7, #28]
 8003b6c:	f000 f8b4 	bl	8003cd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b70:	2301      	movs	r3, #1
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e002      	b.n	8003b7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
	}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	21a5      	movs	r1, #165	@ 0xa5
 8003ba2:	f001 ff43 	bl	8005a2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f023 0307 	bic.w	r3, r3, #7
 8003bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	617b      	str	r3, [r7, #20]
}
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	e7fd      	b.n	8003bde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01f      	beq.n	8003c28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e012      	b.n	8003c14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	7819      	ldrb	r1, [r3, #0]
 8003bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3334      	adds	r3, #52	@ 0x34
 8003bfe:	460a      	mov	r2, r1
 8003c00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	d9e9      	bls.n	8003bee <prvInitialiseNewTask+0x66>
 8003c1a:	e000      	b.n	8003c1e <prvInitialiseNewTask+0x96>
			{
				break;
 8003c1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c26:	e003      	b.n	8003c30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c32:	2b37      	cmp	r3, #55	@ 0x37
 8003c34:	d901      	bls.n	8003c3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c36:	2337      	movs	r3, #55	@ 0x37
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c48:	2200      	movs	r2, #0
 8003c4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe ffcf 	bl	8002bf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	3318      	adds	r3, #24
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe ffca 	bl	8002bf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c88:	3354      	adds	r3, #84	@ 0x54
 8003c8a:	224c      	movs	r2, #76	@ 0x4c
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fecc 	bl	8005a2c <memset>
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <prvInitialiseNewTask+0x144>)
 8003c98:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd0 <prvInitialiseNewTask+0x148>)
 8003c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd4 <prvInitialiseNewTask+0x14c>)
 8003ca4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	69b8      	ldr	r0, [r7, #24]
 8003cac:	f001 fa5a 	bl	8005164 <pxPortInitialiseStack>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cc2:	bf00      	nop
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20004afc 	.word	0x20004afc
 8003cd0:	20004b64 	.word	0x20004b64
 8003cd4:	20004bcc 	.word	0x20004bcc

08003cd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ce0:	f001 fb72 	bl	80053c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a2c      	ldr	r2, [pc, #176]	@ (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003cec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cee:	4b2c      	ldr	r3, [pc, #176]	@ (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cfc:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d110      	bne.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d04:	f000 fc2e 	bl	8004564 <prvInitialiseTaskLists>
 8003d08:	e00d      	b.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d0a:	4b26      	ldr	r3, [pc, #152]	@ (8003da4 <prvAddNewTaskToReadyList+0xcc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d12:	4b23      	ldr	r3, [pc, #140]	@ (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d802      	bhi.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d20:	4a1f      	ldr	r2, [pc, #124]	@ (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d26:	4b20      	ldr	r3, [pc, #128]	@ (8003da8 <prvAddNewTaskToReadyList+0xd0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003da8 <prvAddNewTaskToReadyList+0xd0>)
 8003d2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d30:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <prvAddNewTaskToReadyList+0xd0>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <prvAddNewTaskToReadyList+0xd4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d903      	bls.n	8003d4c <prvAddNewTaskToReadyList+0x74>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	4a18      	ldr	r2, [pc, #96]	@ (8003dac <prvAddNewTaskToReadyList+0xd4>)
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4a15      	ldr	r2, [pc, #84]	@ (8003db0 <prvAddNewTaskToReadyList+0xd8>)
 8003d5a:	441a      	add	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f7fe ff53 	bl	8002c0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d68:	f001 fb60 	bl	800542c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <prvAddNewTaskToReadyList+0xcc>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d74:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d207      	bcs.n	8003d92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d82:	4b0c      	ldr	r3, [pc, #48]	@ (8003db4 <prvAddNewTaskToReadyList+0xdc>)
 8003d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000d7c 	.word	0x20000d7c
 8003da0:	200008a8 	.word	0x200008a8
 8003da4:	20000d88 	.word	0x20000d88
 8003da8:	20000d98 	.word	0x20000d98
 8003dac:	20000d84 	.word	0x20000d84
 8003db0:	200008ac 	.word	0x200008ac
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003dca:	4b14      	ldr	r3, [pc, #80]	@ (8003e1c <vTaskDelay+0x64>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <vTaskDelay+0x32>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	60bb      	str	r3, [r7, #8]
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	e7fd      	b.n	8003de6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dea:	f000 f88b 	bl	8003f04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dee:	2100      	movs	r1, #0
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fe09 	bl	8004a08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003df6:	f000 f893 	bl	8003f20 <xTaskResumeAll>
 8003dfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e02:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <vTaskDelay+0x68>)
 8003e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000da4 	.word	0x20000da4
 8003e20:	e000ed04 	.word	0xe000ed04

08003e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	@ 0x28
 8003e28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e32:	463a      	mov	r2, r7
 8003e34:	1d39      	adds	r1, r7, #4
 8003e36:	f107 0308 	add.w	r3, r7, #8
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fe86 	bl	8002b4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e40:	6839      	ldr	r1, [r7, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	9202      	str	r2, [sp, #8]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	460a      	mov	r2, r1
 8003e52:	4924      	ldr	r1, [pc, #144]	@ (8003ee4 <vTaskStartScheduler+0xc0>)
 8003e54:	4824      	ldr	r0, [pc, #144]	@ (8003ee8 <vTaskStartScheduler+0xc4>)
 8003e56:	f7ff fdf1 	bl	8003a3c <xTaskCreateStatic>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4a23      	ldr	r2, [pc, #140]	@ (8003eec <vTaskStartScheduler+0xc8>)
 8003e5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e60:	4b22      	ldr	r3, [pc, #136]	@ (8003eec <vTaskStartScheduler+0xc8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e001      	b.n	8003e72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d102      	bne.n	8003e7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e78:	f000 fe1a 	bl	8004ab0 <xTimerCreateTimerTask>
 8003e7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d11b      	bne.n	8003ebc <vTaskStartScheduler+0x98>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	613b      	str	r3, [r7, #16]
}
 8003e96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e98:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <vTaskStartScheduler+0xcc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3354      	adds	r3, #84	@ 0x54
 8003e9e:	4a15      	ldr	r2, [pc, #84]	@ (8003ef4 <vTaskStartScheduler+0xd0>)
 8003ea0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ea2:	4b15      	ldr	r3, [pc, #84]	@ (8003ef8 <vTaskStartScheduler+0xd4>)
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ea8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003eaa:	4b14      	ldr	r3, [pc, #80]	@ (8003efc <vTaskStartScheduler+0xd8>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <vTaskStartScheduler+0xdc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003eb6:	f001 f9e3 	bl	8005280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003eba:	e00f      	b.n	8003edc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ec2:	d10b      	bne.n	8003edc <vTaskStartScheduler+0xb8>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	60fb      	str	r3, [r7, #12]
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <vTaskStartScheduler+0xb4>
}
 8003edc:	bf00      	nop
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	08006488 	.word	0x08006488
 8003ee8:	08004535 	.word	0x08004535
 8003eec:	20000da0 	.word	0x20000da0
 8003ef0:	200008a8 	.word	0x200008a8
 8003ef4:	2000000c 	.word	0x2000000c
 8003ef8:	20000d9c 	.word	0x20000d9c
 8003efc:	20000d88 	.word	0x20000d88
 8003f00:	20000d80 	.word	0x20000d80

08003f04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f08:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <vTaskSuspendAll+0x18>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4a03      	ldr	r2, [pc, #12]	@ (8003f1c <vTaskSuspendAll+0x18>)
 8003f10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	20000da4 	.word	0x20000da4

08003f20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f2e:	4b42      	ldr	r3, [pc, #264]	@ (8004038 <xTaskResumeAll+0x118>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10b      	bne.n	8003f4e <xTaskResumeAll+0x2e>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	603b      	str	r3, [r7, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	e7fd      	b.n	8003f4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f4e:	f001 fa3b 	bl	80053c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f52:	4b39      	ldr	r3, [pc, #228]	@ (8004038 <xTaskResumeAll+0x118>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	4a37      	ldr	r2, [pc, #220]	@ (8004038 <xTaskResumeAll+0x118>)
 8003f5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f5c:	4b36      	ldr	r3, [pc, #216]	@ (8004038 <xTaskResumeAll+0x118>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d162      	bne.n	800402a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f64:	4b35      	ldr	r3, [pc, #212]	@ (800403c <xTaskResumeAll+0x11c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05e      	beq.n	800402a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f6c:	e02f      	b.n	8003fce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6e:	4b34      	ldr	r3, [pc, #208]	@ (8004040 <xTaskResumeAll+0x120>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3318      	adds	r3, #24
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fea4 	bl	8002cc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe fe9f 	bl	8002cc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004044 <xTaskResumeAll+0x124>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d903      	bls.n	8003f9e <xTaskResumeAll+0x7e>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004044 <xTaskResumeAll+0x124>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4a27      	ldr	r2, [pc, #156]	@ (8004048 <xTaskResumeAll+0x128>)
 8003fac:	441a      	add	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7fe fe2a 	bl	8002c0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fbe:	4b23      	ldr	r3, [pc, #140]	@ (800404c <xTaskResumeAll+0x12c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003fc8:	4b21      	ldr	r3, [pc, #132]	@ (8004050 <xTaskResumeAll+0x130>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fce:	4b1c      	ldr	r3, [pc, #112]	@ (8004040 <xTaskResumeAll+0x120>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1cb      	bne.n	8003f6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fdc:	f000 fb66 	bl	80046ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8004054 <xTaskResumeAll+0x134>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d010      	beq.n	800400e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fec:	f000 f846 	bl	800407c <xTaskIncrementTick>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ff6:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <xTaskResumeAll+0x130>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f1      	bne.n	8003fec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004008:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <xTaskResumeAll+0x134>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800400e:	4b10      	ldr	r3, [pc, #64]	@ (8004050 <xTaskResumeAll+0x130>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004016:	2301      	movs	r3, #1
 8004018:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800401a:	4b0f      	ldr	r3, [pc, #60]	@ (8004058 <xTaskResumeAll+0x138>)
 800401c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800402a:	f001 f9ff 	bl	800542c <vPortExitCritical>

	return xAlreadyYielded;
 800402e:	68bb      	ldr	r3, [r7, #8]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000da4 	.word	0x20000da4
 800403c:	20000d7c 	.word	0x20000d7c
 8004040:	20000d3c 	.word	0x20000d3c
 8004044:	20000d84 	.word	0x20000d84
 8004048:	200008ac 	.word	0x200008ac
 800404c:	200008a8 	.word	0x200008a8
 8004050:	20000d90 	.word	0x20000d90
 8004054:	20000d8c 	.word	0x20000d8c
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004062:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <xTaskGetTickCount+0x1c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004068:	687b      	ldr	r3, [r7, #4]
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000d80 	.word	0x20000d80

0800407c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004086:	4b4f      	ldr	r3, [pc, #316]	@ (80041c4 <xTaskIncrementTick+0x148>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 8090 	bne.w	80041b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004090:	4b4d      	ldr	r3, [pc, #308]	@ (80041c8 <xTaskIncrementTick+0x14c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004098:	4a4b      	ldr	r2, [pc, #300]	@ (80041c8 <xTaskIncrementTick+0x14c>)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d121      	bne.n	80040e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80040a4:	4b49      	ldr	r3, [pc, #292]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	603b      	str	r3, [r7, #0]
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	e7fd      	b.n	80040c2 <xTaskIncrementTick+0x46>
 80040c6:	4b41      	ldr	r3, [pc, #260]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	4b40      	ldr	r3, [pc, #256]	@ (80041d0 <xTaskIncrementTick+0x154>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a3e      	ldr	r2, [pc, #248]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4a3e      	ldr	r2, [pc, #248]	@ (80041d0 <xTaskIncrementTick+0x154>)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b3e      	ldr	r3, [pc, #248]	@ (80041d4 <xTaskIncrementTick+0x158>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	4a3c      	ldr	r2, [pc, #240]	@ (80041d4 <xTaskIncrementTick+0x158>)
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	f000 fae2 	bl	80046ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040e8:	4b3b      	ldr	r3, [pc, #236]	@ (80041d8 <xTaskIncrementTick+0x15c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d349      	bcc.n	8004186 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f2:	4b36      	ldr	r3, [pc, #216]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fc:	4b36      	ldr	r3, [pc, #216]	@ (80041d8 <xTaskIncrementTick+0x15c>)
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004102:	601a      	str	r2, [r3, #0]
					break;
 8004104:	e03f      	b.n	8004186 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004106:	4b31      	ldr	r3, [pc, #196]	@ (80041cc <xTaskIncrementTick+0x150>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d203      	bcs.n	8004126 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800411e:	4a2e      	ldr	r2, [pc, #184]	@ (80041d8 <xTaskIncrementTick+0x15c>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004124:	e02f      	b.n	8004186 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3304      	adds	r3, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fdcc 	bl	8002cc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	3318      	adds	r3, #24
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe fdc3 	bl	8002cc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004146:	4b25      	ldr	r3, [pc, #148]	@ (80041dc <xTaskIncrementTick+0x160>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d903      	bls.n	8004156 <xTaskIncrementTick+0xda>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	4a22      	ldr	r2, [pc, #136]	@ (80041dc <xTaskIncrementTick+0x160>)
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4a1f      	ldr	r2, [pc, #124]	@ (80041e0 <xTaskIncrementTick+0x164>)
 8004164:	441a      	add	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3304      	adds	r3, #4
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f7fe fd4e 	bl	8002c0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004176:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <xTaskIncrementTick+0x168>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	429a      	cmp	r2, r3
 800417e:	d3b8      	bcc.n	80040f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004184:	e7b5      	b.n	80040f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004186:	4b17      	ldr	r3, [pc, #92]	@ (80041e4 <xTaskIncrementTick+0x168>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418c:	4914      	ldr	r1, [pc, #80]	@ (80041e0 <xTaskIncrementTick+0x164>)
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d901      	bls.n	80041a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800419e:	2301      	movs	r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041a2:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <xTaskIncrementTick+0x16c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	e004      	b.n	80041ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041b0:	4b0e      	ldr	r3, [pc, #56]	@ (80041ec <xTaskIncrementTick+0x170>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	4a0d      	ldr	r2, [pc, #52]	@ (80041ec <xTaskIncrementTick+0x170>)
 80041b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041ba:	697b      	ldr	r3, [r7, #20]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000da4 	.word	0x20000da4
 80041c8:	20000d80 	.word	0x20000d80
 80041cc:	20000d34 	.word	0x20000d34
 80041d0:	20000d38 	.word	0x20000d38
 80041d4:	20000d94 	.word	0x20000d94
 80041d8:	20000d9c 	.word	0x20000d9c
 80041dc:	20000d84 	.word	0x20000d84
 80041e0:	200008ac 	.word	0x200008ac
 80041e4:	200008a8 	.word	0x200008a8
 80041e8:	20000d90 	.word	0x20000d90
 80041ec:	20000d8c 	.word	0x20000d8c

080041f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041f6:	4b2b      	ldr	r3, [pc, #172]	@ (80042a4 <vTaskSwitchContext+0xb4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041fe:	4b2a      	ldr	r3, [pc, #168]	@ (80042a8 <vTaskSwitchContext+0xb8>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004204:	e047      	b.n	8004296 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004206:	4b28      	ldr	r3, [pc, #160]	@ (80042a8 <vTaskSwitchContext+0xb8>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420c:	4b27      	ldr	r3, [pc, #156]	@ (80042ac <vTaskSwitchContext+0xbc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e011      	b.n	8004238 <vTaskSwitchContext+0x48>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <vTaskSwitchContext+0x42>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	607b      	str	r3, [r7, #4]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <vTaskSwitchContext+0x3e>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3b01      	subs	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	491d      	ldr	r1, [pc, #116]	@ (80042b0 <vTaskSwitchContext+0xc0>)
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0e3      	beq.n	8004214 <vTaskSwitchContext+0x24>
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4a16      	ldr	r2, [pc, #88]	@ (80042b0 <vTaskSwitchContext+0xc0>)
 8004258:	4413      	add	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3308      	adds	r3, #8
 800426e:	429a      	cmp	r2, r3
 8004270:	d104      	bne.n	800427c <vTaskSwitchContext+0x8c>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4a0c      	ldr	r2, [pc, #48]	@ (80042b4 <vTaskSwitchContext+0xc4>)
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4a09      	ldr	r2, [pc, #36]	@ (80042ac <vTaskSwitchContext+0xbc>)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800428c:	4b09      	ldr	r3, [pc, #36]	@ (80042b4 <vTaskSwitchContext+0xc4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3354      	adds	r3, #84	@ 0x54
 8004292:	4a09      	ldr	r2, [pc, #36]	@ (80042b8 <vTaskSwitchContext+0xc8>)
 8004294:	6013      	str	r3, [r2, #0]
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000da4 	.word	0x20000da4
 80042a8:	20000d90 	.word	0x20000d90
 80042ac:	20000d84 	.word	0x20000d84
 80042b0:	200008ac 	.word	0x200008ac
 80042b4:	200008a8 	.word	0x200008a8
 80042b8:	2000000c 	.word	0x2000000c

080042bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	60fb      	str	r3, [r7, #12]
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042e4:	4b07      	ldr	r3, [pc, #28]	@ (8004304 <vTaskPlaceOnEventList+0x48>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3318      	adds	r3, #24
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fe fcb2 	bl	8002c56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042f2:	2101      	movs	r1, #1
 80042f4:	6838      	ldr	r0, [r7, #0]
 80042f6:	f000 fb87 	bl	8004a08 <prvAddCurrentTaskToDelayedList>
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200008a8 	.word	0x200008a8

08004308 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	617b      	str	r3, [r7, #20]
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	e7fd      	b.n	800432e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004332:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <vTaskPlaceOnEventListRestricted+0x54>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3318      	adds	r3, #24
 8004338:	4619      	mov	r1, r3
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7fe fc67 	bl	8002c0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800434a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	68b8      	ldr	r0, [r7, #8]
 8004350:	f000 fb5a 	bl	8004a08 <prvAddCurrentTaskToDelayedList>
	}
 8004354:	bf00      	nop
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	200008a8 	.word	0x200008a8

08004360 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	60fb      	str	r3, [r7, #12]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3318      	adds	r3, #24
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe fc98 	bl	8002cc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004398:	4b1d      	ldr	r3, [pc, #116]	@ (8004410 <xTaskRemoveFromEventList+0xb0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11d      	bne.n	80043dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fc8f 	bl	8002cc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ae:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <xTaskRemoveFromEventList+0xb4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d903      	bls.n	80043be <xTaskRemoveFromEventList+0x5e>
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	4a16      	ldr	r2, [pc, #88]	@ (8004414 <xTaskRemoveFromEventList+0xb4>)
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4a13      	ldr	r2, [pc, #76]	@ (8004418 <xTaskRemoveFromEventList+0xb8>)
 80043cc:	441a      	add	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7fe fc1a 	bl	8002c0e <vListInsertEnd>
 80043da:	e005      	b.n	80043e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	3318      	adds	r3, #24
 80043e0:	4619      	mov	r1, r3
 80043e2:	480e      	ldr	r0, [pc, #56]	@ (800441c <xTaskRemoveFromEventList+0xbc>)
 80043e4:	f7fe fc13 	bl	8002c0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004420 <xTaskRemoveFromEventList+0xc0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d905      	bls.n	8004402 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80043f6:	2301      	movs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80043fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <xTaskRemoveFromEventList+0xc4>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e001      	b.n	8004406 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004406:	697b      	ldr	r3, [r7, #20]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000da4 	.word	0x20000da4
 8004414:	20000d84 	.word	0x20000d84
 8004418:	200008ac 	.word	0x200008ac
 800441c:	20000d3c 	.word	0x20000d3c
 8004420:	200008a8 	.word	0x200008a8
 8004424:	20000d90 	.word	0x20000d90

08004428 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004430:	4b06      	ldr	r3, [pc, #24]	@ (800444c <vTaskInternalSetTimeOutState+0x24>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004438:	4b05      	ldr	r3, [pc, #20]	@ (8004450 <vTaskInternalSetTimeOutState+0x28>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	605a      	str	r2, [r3, #4]
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	20000d94 	.word	0x20000d94
 8004450:	20000d80 	.word	0x20000d80

08004454 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	613b      	str	r3, [r7, #16]
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	e7fd      	b.n	8004478 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	60fb      	str	r3, [r7, #12]
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	e7fd      	b.n	8004496 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800449a:	f000 ff95 	bl	80053c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800449e:	4b1d      	ldr	r3, [pc, #116]	@ (8004514 <xTaskCheckForTimeOut+0xc0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044b6:	d102      	bne.n	80044be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	e023      	b.n	8004506 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b15      	ldr	r3, [pc, #84]	@ (8004518 <xTaskCheckForTimeOut+0xc4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d007      	beq.n	80044da <xTaskCheckForTimeOut+0x86>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d302      	bcc.n	80044da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e015      	b.n	8004506 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d20b      	bcs.n	80044fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	1ad2      	subs	r2, r2, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff99 	bl	8004428 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	e004      	b.n	8004506 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004506:	f000 ff91 	bl	800542c <vPortExitCritical>

	return xReturn;
 800450a:	69fb      	ldr	r3, [r7, #28]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000d80 	.word	0x20000d80
 8004518:	20000d94 	.word	0x20000d94

0800451c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004520:	4b03      	ldr	r3, [pc, #12]	@ (8004530 <vTaskMissedYield+0x14>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]
}
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20000d90 	.word	0x20000d90

08004534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800453c:	f000 f852 	bl	80045e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004540:	4b06      	ldr	r3, [pc, #24]	@ (800455c <prvIdleTask+0x28>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d9f9      	bls.n	800453c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004548:	4b05      	ldr	r3, [pc, #20]	@ (8004560 <prvIdleTask+0x2c>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004558:	e7f0      	b.n	800453c <prvIdleTask+0x8>
 800455a:	bf00      	nop
 800455c:	200008ac 	.word	0x200008ac
 8004560:	e000ed04 	.word	0xe000ed04

08004564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	e00c      	b.n	800458a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <prvInitialiseTaskLists+0x60>)
 800457c:	4413      	add	r3, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fb18 	bl	8002bb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3301      	adds	r3, #1
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b37      	cmp	r3, #55	@ 0x37
 800458e:	d9ef      	bls.n	8004570 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004590:	480d      	ldr	r0, [pc, #52]	@ (80045c8 <prvInitialiseTaskLists+0x64>)
 8004592:	f7fe fb0f 	bl	8002bb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004596:	480d      	ldr	r0, [pc, #52]	@ (80045cc <prvInitialiseTaskLists+0x68>)
 8004598:	f7fe fb0c 	bl	8002bb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800459c:	480c      	ldr	r0, [pc, #48]	@ (80045d0 <prvInitialiseTaskLists+0x6c>)
 800459e:	f7fe fb09 	bl	8002bb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045a2:	480c      	ldr	r0, [pc, #48]	@ (80045d4 <prvInitialiseTaskLists+0x70>)
 80045a4:	f7fe fb06 	bl	8002bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045a8:	480b      	ldr	r0, [pc, #44]	@ (80045d8 <prvInitialiseTaskLists+0x74>)
 80045aa:	f7fe fb03 	bl	8002bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <prvInitialiseTaskLists+0x78>)
 80045b0:	4a05      	ldr	r2, [pc, #20]	@ (80045c8 <prvInitialiseTaskLists+0x64>)
 80045b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045b4:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <prvInitialiseTaskLists+0x7c>)
 80045b6:	4a05      	ldr	r2, [pc, #20]	@ (80045cc <prvInitialiseTaskLists+0x68>)
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200008ac 	.word	0x200008ac
 80045c8:	20000d0c 	.word	0x20000d0c
 80045cc:	20000d20 	.word	0x20000d20
 80045d0:	20000d3c 	.word	0x20000d3c
 80045d4:	20000d50 	.word	0x20000d50
 80045d8:	20000d68 	.word	0x20000d68
 80045dc:	20000d34 	.word	0x20000d34
 80045e0:	20000d38 	.word	0x20000d38

080045e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045ea:	e019      	b.n	8004620 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045ec:	f000 feec 	bl	80053c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f0:	4b10      	ldr	r3, [pc, #64]	@ (8004634 <prvCheckTasksWaitingTermination+0x50>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fb63 	bl	8002cc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004602:	4b0d      	ldr	r3, [pc, #52]	@ (8004638 <prvCheckTasksWaitingTermination+0x54>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	4a0b      	ldr	r2, [pc, #44]	@ (8004638 <prvCheckTasksWaitingTermination+0x54>)
 800460a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <prvCheckTasksWaitingTermination+0x58>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3b01      	subs	r3, #1
 8004612:	4a0a      	ldr	r2, [pc, #40]	@ (800463c <prvCheckTasksWaitingTermination+0x58>)
 8004614:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004616:	f000 ff09 	bl	800542c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f810 	bl	8004640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004620:	4b06      	ldr	r3, [pc, #24]	@ (800463c <prvCheckTasksWaitingTermination+0x58>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e1      	bne.n	80045ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000d50 	.word	0x20000d50
 8004638:	20000d7c 	.word	0x20000d7c
 800463c:	20000d64 	.word	0x20000d64

08004640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3354      	adds	r3, #84	@ 0x54
 800464c:	4618      	mov	r0, r3
 800464e:	f001 fa0b 	bl	8005a68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004658:	2b00      	cmp	r3, #0
 800465a:	d108      	bne.n	800466e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	4618      	mov	r0, r3
 8004662:	f001 f8a1 	bl	80057a8 <vPortFree>
				vPortFree( pxTCB );
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f001 f89e 	bl	80057a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800466c:	e019      	b.n	80046a2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004674:	2b01      	cmp	r3, #1
 8004676:	d103      	bne.n	8004680 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f001 f895 	bl	80057a8 <vPortFree>
	}
 800467e:	e010      	b.n	80046a2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004686:	2b02      	cmp	r3, #2
 8004688:	d00b      	beq.n	80046a2 <prvDeleteTCB+0x62>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	60fb      	str	r3, [r7, #12]
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	e7fd      	b.n	800469e <prvDeleteTCB+0x5e>
	}
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046b2:	4b0c      	ldr	r3, [pc, #48]	@ (80046e4 <prvResetNextTaskUnblockTime+0x38>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046bc:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <prvResetNextTaskUnblockTime+0x3c>)
 80046be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046c4:	e008      	b.n	80046d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c6:	4b07      	ldr	r3, [pc, #28]	@ (80046e4 <prvResetNextTaskUnblockTime+0x38>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <prvResetNextTaskUnblockTime+0x3c>)
 80046d6:	6013      	str	r3, [r2, #0]
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	20000d34 	.word	0x20000d34
 80046e8:	20000d9c 	.word	0x20000d9c

080046ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <xTaskGetSchedulerState+0x34>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046fa:	2301      	movs	r3, #1
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	e008      	b.n	8004712 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004700:	4b08      	ldr	r3, [pc, #32]	@ (8004724 <xTaskGetSchedulerState+0x38>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004708:	2302      	movs	r3, #2
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	e001      	b.n	8004712 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004712:	687b      	ldr	r3, [r7, #4]
	}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	20000d88 	.word	0x20000d88
 8004724:	20000da4 	.word	0x20000da4

08004728 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d051      	beq.n	80047e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004742:	4b2a      	ldr	r3, [pc, #168]	@ (80047ec <xTaskPriorityInherit+0xc4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004748:	429a      	cmp	r2, r3
 800474a:	d241      	bcs.n	80047d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	db06      	blt.n	8004762 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004754:	4b25      	ldr	r3, [pc, #148]	@ (80047ec <xTaskPriorityInherit+0xc4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6959      	ldr	r1, [r3, #20]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4a1f      	ldr	r2, [pc, #124]	@ (80047f0 <xTaskPriorityInherit+0xc8>)
 8004774:	4413      	add	r3, r2
 8004776:	4299      	cmp	r1, r3
 8004778:	d122      	bne.n	80047c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3304      	adds	r3, #4
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe faa2 	bl	8002cc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004784:	4b19      	ldr	r3, [pc, #100]	@ (80047ec <xTaskPriorityInherit+0xc4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004792:	4b18      	ldr	r3, [pc, #96]	@ (80047f4 <xTaskPriorityInherit+0xcc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d903      	bls.n	80047a2 <xTaskPriorityInherit+0x7a>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	4a15      	ldr	r2, [pc, #84]	@ (80047f4 <xTaskPriorityInherit+0xcc>)
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <xTaskPriorityInherit+0xc8>)
 80047b0:	441a      	add	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7fe fa28 	bl	8002c0e <vListInsertEnd>
 80047be:	e004      	b.n	80047ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047c0:	4b0a      	ldr	r3, [pc, #40]	@ (80047ec <xTaskPriorityInherit+0xc4>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80047ca:	2301      	movs	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e008      	b.n	80047e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047d4:	4b05      	ldr	r3, [pc, #20]	@ (80047ec <xTaskPriorityInherit+0xc4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	429a      	cmp	r2, r3
 80047dc:	d201      	bcs.n	80047e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80047de:	2301      	movs	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047e2:	68fb      	ldr	r3, [r7, #12]
	}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	200008a8 	.word	0x200008a8
 80047f0:	200008ac 	.word	0x200008ac
 80047f4:	20000d84 	.word	0x20000d84

080047f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d058      	beq.n	80048c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800480e:	4b2f      	ldr	r3, [pc, #188]	@ (80048cc <xTaskPriorityDisinherit+0xd4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	429a      	cmp	r2, r3
 8004816:	d00b      	beq.n	8004830 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60fb      	str	r3, [r7, #12]
}
 800482a:	bf00      	nop
 800482c:	bf00      	nop
 800482e:	e7fd      	b.n	800482c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10b      	bne.n	8004850 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60bb      	str	r3, [r7, #8]
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004854:	1e5a      	subs	r2, r3, #1
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004862:	429a      	cmp	r2, r3
 8004864:	d02c      	beq.n	80048c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800486a:	2b00      	cmp	r3, #0
 800486c:	d128      	bne.n	80048c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	3304      	adds	r3, #4
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fa28 	bl	8002cc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004890:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <xTaskPriorityDisinherit+0xd8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d903      	bls.n	80048a0 <xTaskPriorityDisinherit+0xa8>
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	4a0c      	ldr	r2, [pc, #48]	@ (80048d0 <xTaskPriorityDisinherit+0xd8>)
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4a09      	ldr	r2, [pc, #36]	@ (80048d4 <xTaskPriorityDisinherit+0xdc>)
 80048ae:	441a      	add	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f7fe f9a9 	bl	8002c0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048c0:	697b      	ldr	r3, [r7, #20]
	}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200008a8 	.word	0x200008a8
 80048d0:	20000d84 	.word	0x20000d84
 80048d4:	200008ac 	.word	0x200008ac

080048d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d06c      	beq.n	80049ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	60fb      	str	r3, [r7, #12]
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	e7fd      	b.n	800490c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d902      	bls.n	8004920 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	e002      	b.n	8004926 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004924:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	429a      	cmp	r2, r3
 800492e:	d04c      	beq.n	80049ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	429a      	cmp	r2, r3
 8004938:	d147      	bne.n	80049ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800493a:	4b26      	ldr	r3, [pc, #152]	@ (80049d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	429a      	cmp	r2, r3
 8004942:	d10b      	bne.n	800495c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	60bb      	str	r3, [r7, #8]
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004960:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	db04      	blt.n	800497a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	6959      	ldr	r1, [r3, #20]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4a13      	ldr	r2, [pc, #76]	@ (80049d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800498a:	4413      	add	r3, r2
 800498c:	4299      	cmp	r1, r3
 800498e:	d11c      	bne.n	80049ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	3304      	adds	r3, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f7fe f997 	bl	8002cc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499e:	4b0f      	ldr	r3, [pc, #60]	@ (80049dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d903      	bls.n	80049ae <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	4a0c      	ldr	r2, [pc, #48]	@ (80049dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4a07      	ldr	r2, [pc, #28]	@ (80049d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80049bc:	441a      	add	r2, r3
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f7fe f922 	bl	8002c0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049ca:	bf00      	nop
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	200008a8 	.word	0x200008a8
 80049d8:	200008ac 	.word	0x200008ac
 80049dc:	20000d84 	.word	0x20000d84

080049e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80049e4:	4b07      	ldr	r3, [pc, #28]	@ (8004a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80049ec:	4b05      	ldr	r3, [pc, #20]	@ (8004a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049f2:	3201      	adds	r2, #1
 80049f4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80049f6:	4b03      	ldr	r3, [pc, #12]	@ (8004a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80049f8:	681b      	ldr	r3, [r3, #0]
	}
 80049fa:	4618      	mov	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	200008a8 	.word	0x200008a8

08004a08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a12:	4b21      	ldr	r3, [pc, #132]	@ (8004a98 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a18:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe f952 	bl	8002cc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a2a:	d10a      	bne.n	8004a42 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a32:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4819      	ldr	r0, [pc, #100]	@ (8004aa0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a3c:	f7fe f8e7 	bl	8002c0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a40:	e026      	b.n	8004a90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4413      	add	r3, r2
 8004a48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a4a:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d209      	bcs.n	8004a6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a5a:	4b12      	ldr	r3, [pc, #72]	@ (8004aa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f7fe f8f5 	bl	8002c56 <vListInsert>
}
 8004a6c:	e010      	b.n	8004a90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f7fe f8eb 	bl	8002c56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a80:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d202      	bcs.n	8004a90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a8a:	4a08      	ldr	r2, [pc, #32]	@ (8004aac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6013      	str	r3, [r2, #0]
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000d80 	.word	0x20000d80
 8004a9c:	200008a8 	.word	0x200008a8
 8004aa0:	20000d68 	.word	0x20000d68
 8004aa4:	20000d38 	.word	0x20000d38
 8004aa8:	20000d34 	.word	0x20000d34
 8004aac:	20000d9c 	.word	0x20000d9c

08004ab0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	@ 0x28
 8004ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004aba:	f000 fb13 	bl	80050e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004abe:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <xTimerCreateTimerTask+0x84>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d021      	beq.n	8004b0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ace:	1d3a      	adds	r2, r7, #4
 8004ad0:	f107 0108 	add.w	r1, r7, #8
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fe f851 	bl	8002b80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	9202      	str	r2, [sp, #8]
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	2302      	movs	r3, #2
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	2300      	movs	r3, #0
 8004aee:	460a      	mov	r2, r1
 8004af0:	4911      	ldr	r1, [pc, #68]	@ (8004b38 <xTimerCreateTimerTask+0x88>)
 8004af2:	4812      	ldr	r0, [pc, #72]	@ (8004b3c <xTimerCreateTimerTask+0x8c>)
 8004af4:	f7fe ffa2 	bl	8003a3c <xTaskCreateStatic>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4a11      	ldr	r2, [pc, #68]	@ (8004b40 <xTimerCreateTimerTask+0x90>)
 8004afc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004afe:	4b10      	ldr	r3, [pc, #64]	@ (8004b40 <xTimerCreateTimerTask+0x90>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b06:	2301      	movs	r3, #1
 8004b08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	613b      	str	r3, [r7, #16]
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b28:	697b      	ldr	r3, [r7, #20]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000dd8 	.word	0x20000dd8
 8004b38:	08006490 	.word	0x08006490
 8004b3c:	08004c7d 	.word	0x08004c7d
 8004b40:	20000ddc 	.word	0x20000ddc

08004b44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	@ 0x28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <xTimerGenericCommand+0x30>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	623b      	str	r3, [r7, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b74:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <xTimerGenericCommand+0x98>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02a      	beq.n	8004bd2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	dc18      	bgt.n	8004bc0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b8e:	f7ff fdad 	bl	80046ec <xTaskGetSchedulerState>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d109      	bne.n	8004bac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b98:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <xTimerGenericCommand+0x98>)
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	f107 0110 	add.w	r1, r7, #16
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba4:	f7fe fa32 	bl	800300c <xQueueGenericSend>
 8004ba8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004baa:	e012      	b.n	8004bd2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <xTimerGenericCommand+0x98>)
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	f107 0110 	add.w	r1, r7, #16
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f7fe fa28 	bl	800300c <xQueueGenericSend>
 8004bbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bbe:	e008      	b.n	8004bd2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <xTimerGenericCommand+0x98>)
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	f107 0110 	add.w	r1, r7, #16
 8004bc8:	2300      	movs	r3, #0
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	f7fe fb20 	bl	8003210 <xQueueGenericSendFromISR>
 8004bd0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3728      	adds	r7, #40	@ 0x28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000dd8 	.word	0x20000dd8

08004be0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bea:	4b23      	ldr	r3, [pc, #140]	@ (8004c78 <prvProcessExpiredTimer+0x98>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe f865 	bl	8002cc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d023      	beq.n	8004c54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	18d1      	adds	r1, r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	6978      	ldr	r0, [r7, #20]
 8004c1a:	f000 f8d5 	bl	8004dc8 <prvInsertTimerInActiveList>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c24:	2300      	movs	r3, #0
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	6978      	ldr	r0, [r7, #20]
 8004c30:	f7ff ff88 	bl	8004b44 <xTimerGenericCommand>
 8004c34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d114      	bne.n	8004c66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	60fb      	str	r3, [r7, #12]
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	e7fd      	b.n	8004c50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	4798      	blx	r3
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000dd0 	.word	0x20000dd0

08004c7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c84:	f107 0308 	add.w	r3, r7, #8
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 f859 	bl	8004d40 <prvGetNextExpireTime>
 8004c8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4619      	mov	r1, r3
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f805 	bl	8004ca4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c9a:	f000 f8d7 	bl	8004e4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c9e:	bf00      	nop
 8004ca0:	e7f0      	b.n	8004c84 <prvTimerTask+0x8>
	...

08004ca4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004cae:	f7ff f929 	bl	8003f04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cb2:	f107 0308 	add.w	r3, r7, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f866 	bl	8004d88 <prvSampleTimeNow>
 8004cbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d130      	bne.n	8004d26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <prvProcessTimerOrBlockTask+0x3c>
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d806      	bhi.n	8004ce0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004cd2:	f7ff f925 	bl	8003f20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff81 	bl	8004be0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004cde:	e024      	b.n	8004d2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d008      	beq.n	8004cf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ce6:	4b13      	ldr	r3, [pc, #76]	@ (8004d34 <prvProcessTimerOrBlockTask+0x90>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <prvProcessTimerOrBlockTask+0x50>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <prvProcessTimerOrBlockTask+0x52>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8004d38 <prvProcessTimerOrBlockTask+0x94>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	4619      	mov	r1, r3
 8004d06:	f7fe fe65 	bl	80039d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d0a:	f7ff f909 	bl	8003f20 <xTaskResumeAll>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d14:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <prvProcessTimerOrBlockTask+0x98>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	f3bf 8f6f 	isb	sy
}
 8004d24:	e001      	b.n	8004d2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d26:	f7ff f8fb 	bl	8003f20 <xTaskResumeAll>
}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000dd4 	.word	0x20000dd4
 8004d38:	20000dd8 	.word	0x20000dd8
 8004d3c:	e000ed04 	.word	0xe000ed04

08004d40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d48:	4b0e      	ldr	r3, [pc, #56]	@ (8004d84 <prvGetNextExpireTime+0x44>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <prvGetNextExpireTime+0x16>
 8004d52:	2201      	movs	r2, #1
 8004d54:	e000      	b.n	8004d58 <prvGetNextExpireTime+0x18>
 8004d56:	2200      	movs	r2, #0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d64:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <prvGetNextExpireTime+0x44>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e001      	b.n	8004d74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d74:	68fb      	ldr	r3, [r7, #12]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000dd0 	.word	0x20000dd0

08004d88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d90:	f7ff f964 	bl	800405c <xTaskGetTickCount>
 8004d94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d96:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <prvSampleTimeNow+0x3c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d205      	bcs.n	8004dac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004da0:	f000 f93a 	bl	8005018 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e002      	b.n	8004db2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004db2:	4a04      	ldr	r2, [pc, #16]	@ (8004dc4 <prvSampleTimeNow+0x3c>)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004db8:	68fb      	ldr	r3, [r7, #12]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000de0 	.word	0x20000de0

08004dc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d812      	bhi.n	8004e14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	1ad2      	subs	r2, r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d302      	bcc.n	8004e02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e01b      	b.n	8004e3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e02:	4b10      	ldr	r3, [pc, #64]	@ (8004e44 <prvInsertTimerInActiveList+0x7c>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	f7fd ff22 	bl	8002c56 <vListInsert>
 8004e12:	e012      	b.n	8004e3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d206      	bcs.n	8004e2a <prvInsertTimerInActiveList+0x62>
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d302      	bcc.n	8004e2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e007      	b.n	8004e3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e2a:	4b07      	ldr	r3, [pc, #28]	@ (8004e48 <prvInsertTimerInActiveList+0x80>)
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f7fd ff0e 	bl	8002c56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e3a:	697b      	ldr	r3, [r7, #20]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000dd4 	.word	0x20000dd4
 8004e48:	20000dd0 	.word	0x20000dd0

08004e4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08e      	sub	sp, #56	@ 0x38
 8004e50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e52:	e0ce      	b.n	8004ff2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da19      	bge.n	8004e8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e5a:	1d3b      	adds	r3, r7, #4
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	61fb      	str	r3, [r7, #28]
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	e7fd      	b.n	8004e7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e84:	6850      	ldr	r0, [r2, #4]
 8004e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e88:	6892      	ldr	r2, [r2, #8]
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f2c0 80ae 	blt.w	8004ff2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fd ff0e 	bl	8002cc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eac:	463b      	mov	r3, r7
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ff6a 	bl	8004d88 <prvSampleTimeNow>
 8004eb4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b09      	cmp	r3, #9
 8004eba:	f200 8097 	bhi.w	8004fec <prvProcessReceivedCommands+0x1a0>
 8004ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec4 <prvProcessReceivedCommands+0x78>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004eed 	.word	0x08004eed
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004eed 	.word	0x08004eed
 8004ed0:	08004f63 	.word	0x08004f63
 8004ed4:	08004f77 	.word	0x08004f77
 8004ed8:	08004fc3 	.word	0x08004fc3
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004eed 	.word	0x08004eed
 8004ee4:	08004f63 	.word	0x08004f63
 8004ee8:	08004f77 	.word	0x08004f77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	18d1      	adds	r1, r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f0c:	f7ff ff5c 	bl	8004dc8 <prvInsertTimerInActiveList>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d06c      	beq.n	8004ff0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d061      	beq.n	8004ff0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	441a      	add	r2, r3
 8004f34:	2300      	movs	r3, #0
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f3e:	f7ff fe01 	bl	8004b44 <xTimerGenericCommand>
 8004f42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d152      	bne.n	8004ff0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	61bb      	str	r3, [r7, #24]
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	e7fd      	b.n	8004f5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f74:	e03d      	b.n	8004ff2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	617b      	str	r3, [r7, #20]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	18d1      	adds	r1, r2, r3
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fbc:	f7ff ff04 	bl	8004dc8 <prvInsertTimerInActiveList>
					break;
 8004fc0:	e017      	b.n	8004ff2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fd2:	f000 fbe9 	bl	80057a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004fd6:	e00c      	b.n	8004ff2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fde:	f023 0301 	bic.w	r3, r3, #1
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004fea:	e002      	b.n	8004ff2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <prvProcessReceivedCommands+0x1a6>
					break;
 8004ff0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ff2:	4b08      	ldr	r3, [pc, #32]	@ (8005014 <prvProcessReceivedCommands+0x1c8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	1d39      	adds	r1, r7, #4
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe f9a6 	bl	800334c <xQueueReceive>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	f47f af26 	bne.w	8004e54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	3730      	adds	r7, #48	@ 0x30
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000dd8 	.word	0x20000dd8

08005018 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800501e:	e049      	b.n	80050b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005020:	4b2e      	ldr	r3, [pc, #184]	@ (80050dc <prvSwitchTimerLists+0xc4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800502a:	4b2c      	ldr	r3, [pc, #176]	@ (80050dc <prvSwitchTimerLists+0xc4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3304      	adds	r3, #4
 8005038:	4618      	mov	r0, r3
 800503a:	f7fd fe45 	bl	8002cc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d02f      	beq.n	80050b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4413      	add	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	429a      	cmp	r2, r3
 8005064:	d90e      	bls.n	8005084 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005072:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <prvSwitchTimerLists+0xc4>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3304      	adds	r3, #4
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f7fd fdea 	bl	8002c56 <vListInsert>
 8005082:	e017      	b.n	80050b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005084:	2300      	movs	r3, #0
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2300      	movs	r3, #0
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	2100      	movs	r1, #0
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff fd58 	bl	8004b44 <xTimerGenericCommand>
 8005094:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	603b      	str	r3, [r7, #0]
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	e7fd      	b.n	80050b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050b4:	4b09      	ldr	r3, [pc, #36]	@ (80050dc <prvSwitchTimerLists+0xc4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1b0      	bne.n	8005020 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050be:	4b07      	ldr	r3, [pc, #28]	@ (80050dc <prvSwitchTimerLists+0xc4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050c4:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <prvSwitchTimerLists+0xc8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a04      	ldr	r2, [pc, #16]	@ (80050dc <prvSwitchTimerLists+0xc4>)
 80050ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050cc:	4a04      	ldr	r2, [pc, #16]	@ (80050e0 <prvSwitchTimerLists+0xc8>)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	6013      	str	r3, [r2, #0]
}
 80050d2:	bf00      	nop
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000dd0 	.word	0x20000dd0
 80050e0:	20000dd4 	.word	0x20000dd4

080050e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050ea:	f000 f96d 	bl	80053c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050ee:	4b15      	ldr	r3, [pc, #84]	@ (8005144 <prvCheckForValidListAndQueue+0x60>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d120      	bne.n	8005138 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050f6:	4814      	ldr	r0, [pc, #80]	@ (8005148 <prvCheckForValidListAndQueue+0x64>)
 80050f8:	f7fd fd5c 	bl	8002bb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050fc:	4813      	ldr	r0, [pc, #76]	@ (800514c <prvCheckForValidListAndQueue+0x68>)
 80050fe:	f7fd fd59 	bl	8002bb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005102:	4b13      	ldr	r3, [pc, #76]	@ (8005150 <prvCheckForValidListAndQueue+0x6c>)
 8005104:	4a10      	ldr	r2, [pc, #64]	@ (8005148 <prvCheckForValidListAndQueue+0x64>)
 8005106:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005108:	4b12      	ldr	r3, [pc, #72]	@ (8005154 <prvCheckForValidListAndQueue+0x70>)
 800510a:	4a10      	ldr	r2, [pc, #64]	@ (800514c <prvCheckForValidListAndQueue+0x68>)
 800510c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800510e:	2300      	movs	r3, #0
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	4b11      	ldr	r3, [pc, #68]	@ (8005158 <prvCheckForValidListAndQueue+0x74>)
 8005114:	4a11      	ldr	r2, [pc, #68]	@ (800515c <prvCheckForValidListAndQueue+0x78>)
 8005116:	2110      	movs	r1, #16
 8005118:	200a      	movs	r0, #10
 800511a:	f7fd fe69 	bl	8002df0 <xQueueGenericCreateStatic>
 800511e:	4603      	mov	r3, r0
 8005120:	4a08      	ldr	r2, [pc, #32]	@ (8005144 <prvCheckForValidListAndQueue+0x60>)
 8005122:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005124:	4b07      	ldr	r3, [pc, #28]	@ (8005144 <prvCheckForValidListAndQueue+0x60>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800512c:	4b05      	ldr	r3, [pc, #20]	@ (8005144 <prvCheckForValidListAndQueue+0x60>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	490b      	ldr	r1, [pc, #44]	@ (8005160 <prvCheckForValidListAndQueue+0x7c>)
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fc24 	bl	8003980 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005138:	f000 f978 	bl	800542c <vPortExitCritical>
}
 800513c:	bf00      	nop
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000dd8 	.word	0x20000dd8
 8005148:	20000da8 	.word	0x20000da8
 800514c:	20000dbc 	.word	0x20000dbc
 8005150:	20000dd0 	.word	0x20000dd0
 8005154:	20000dd4 	.word	0x20000dd4
 8005158:	20000e84 	.word	0x20000e84
 800515c:	20000de4 	.word	0x20000de4
 8005160:	08006498 	.word	0x08006498

08005164 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3b04      	subs	r3, #4
 8005174:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800517c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3b04      	subs	r3, #4
 8005182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f023 0201 	bic.w	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3b04      	subs	r3, #4
 8005192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005194:	4a0c      	ldr	r2, [pc, #48]	@ (80051c8 <pxPortInitialiseStack+0x64>)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3b14      	subs	r3, #20
 800519e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3b04      	subs	r3, #4
 80051aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f06f 0202 	mvn.w	r2, #2
 80051b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3b20      	subs	r3, #32
 80051b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051ba:	68fb      	ldr	r3, [r7, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	080051cd 	.word	0x080051cd

080051cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051d6:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <prvTaskExitError+0x58>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051de:	d00b      	beq.n	80051f8 <prvTaskExitError+0x2c>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60fb      	str	r3, [r7, #12]
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <prvTaskExitError+0x28>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	60bb      	str	r3, [r7, #8]
}
 800520a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800520c:	bf00      	nop
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0fc      	beq.n	800520e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000008 	.word	0x20000008
	...

08005230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005230:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <pxCurrentTCBConst2>)
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	6808      	ldr	r0, [r1, #0]
 8005236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523a:	f380 8809 	msr	PSP, r0
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f04f 0000 	mov.w	r0, #0
 8005246:	f380 8811 	msr	BASEPRI, r0
 800524a:	4770      	bx	lr
 800524c:	f3af 8000 	nop.w

08005250 <pxCurrentTCBConst2>:
 8005250:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop

08005258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005258:	4808      	ldr	r0, [pc, #32]	@ (800527c <prvPortStartFirstTask+0x24>)
 800525a:	6800      	ldr	r0, [r0, #0]
 800525c:	6800      	ldr	r0, [r0, #0]
 800525e:	f380 8808 	msr	MSP, r0
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f380 8814 	msr	CONTROL, r0
 800526a:	b662      	cpsie	i
 800526c:	b661      	cpsie	f
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	df00      	svc	0
 8005278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800527a:	bf00      	nop
 800527c:	e000ed08 	.word	0xe000ed08

08005280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005286:	4b47      	ldr	r3, [pc, #284]	@ (80053a4 <xPortStartScheduler+0x124>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a47      	ldr	r2, [pc, #284]	@ (80053a8 <xPortStartScheduler+0x128>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d10b      	bne.n	80052a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	60fb      	str	r3, [r7, #12]
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052a8:	4b3e      	ldr	r3, [pc, #248]	@ (80053a4 <xPortStartScheduler+0x124>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3f      	ldr	r2, [pc, #252]	@ (80053ac <xPortStartScheduler+0x12c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10b      	bne.n	80052ca <xPortStartScheduler+0x4a>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	613b      	str	r3, [r7, #16]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052ca:	4b39      	ldr	r3, [pc, #228]	@ (80053b0 <xPortStartScheduler+0x130>)
 80052cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	22ff      	movs	r2, #255	@ 0xff
 80052da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <xPortStartScheduler+0x134>)
 80052f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052f2:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <xPortStartScheduler+0x138>)
 80052f4:	2207      	movs	r2, #7
 80052f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052f8:	e009      	b.n	800530e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80052fa:	4b2f      	ldr	r3, [pc, #188]	@ (80053b8 <xPortStartScheduler+0x138>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3b01      	subs	r3, #1
 8005300:	4a2d      	ldr	r2, [pc, #180]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800530e:	78fb      	ldrb	r3, [r7, #3]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005316:	2b80      	cmp	r3, #128	@ 0x80
 8005318:	d0ef      	beq.n	80052fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800531a:	4b27      	ldr	r3, [pc, #156]	@ (80053b8 <xPortStartScheduler+0x138>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f1c3 0307 	rsb	r3, r3, #7
 8005322:	2b04      	cmp	r3, #4
 8005324:	d00b      	beq.n	800533e <xPortStartScheduler+0xbe>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60bb      	str	r3, [r7, #8]
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	e7fd      	b.n	800533a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800533e:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	4a1c      	ldr	r2, [pc, #112]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005348:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <xPortStartScheduler+0x138>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005350:	4a19      	ldr	r2, [pc, #100]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800535c:	4b17      	ldr	r3, [pc, #92]	@ (80053bc <xPortStartScheduler+0x13c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a16      	ldr	r2, [pc, #88]	@ (80053bc <xPortStartScheduler+0x13c>)
 8005362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005368:	4b14      	ldr	r3, [pc, #80]	@ (80053bc <xPortStartScheduler+0x13c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a13      	ldr	r2, [pc, #76]	@ (80053bc <xPortStartScheduler+0x13c>)
 800536e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005374:	f000 f8da 	bl	800552c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005378:	4b11      	ldr	r3, [pc, #68]	@ (80053c0 <xPortStartScheduler+0x140>)
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800537e:	f000 f8f9 	bl	8005574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005382:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <xPortStartScheduler+0x144>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a0f      	ldr	r2, [pc, #60]	@ (80053c4 <xPortStartScheduler+0x144>)
 8005388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800538c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800538e:	f7ff ff63 	bl	8005258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005392:	f7fe ff2d 	bl	80041f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005396:	f7ff ff19 	bl	80051cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	e000ed00 	.word	0xe000ed00
 80053a8:	410fc271 	.word	0x410fc271
 80053ac:	410fc270 	.word	0x410fc270
 80053b0:	e000e400 	.word	0xe000e400
 80053b4:	20000ed4 	.word	0x20000ed4
 80053b8:	20000ed8 	.word	0x20000ed8
 80053bc:	e000ed20 	.word	0xe000ed20
 80053c0:	20000008 	.word	0x20000008
 80053c4:	e000ef34 	.word	0xe000ef34

080053c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
}
 80053e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <vPortEnterCritical+0x5c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3301      	adds	r3, #1
 80053e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005424 <vPortEnterCritical+0x5c>)
 80053ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <vPortEnterCritical+0x5c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d110      	bne.n	8005416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <vPortEnterCritical+0x60>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <vPortEnterCritical+0x4e>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	603b      	str	r3, [r7, #0]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <vPortEnterCritical+0x4a>
	}
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000008 	.word	0x20000008
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005432:	4b12      	ldr	r3, [pc, #72]	@ (800547c <vPortExitCritical+0x50>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <vPortExitCritical+0x26>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	607b      	str	r3, [r7, #4]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005452:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <vPortExitCritical+0x50>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3b01      	subs	r3, #1
 8005458:	4a08      	ldr	r2, [pc, #32]	@ (800547c <vPortExitCritical+0x50>)
 800545a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800545c:	4b07      	ldr	r3, [pc, #28]	@ (800547c <vPortExitCritical+0x50>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d105      	bne.n	8005470 <vPortExitCritical+0x44>
 8005464:	2300      	movs	r3, #0
 8005466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f383 8811 	msr	BASEPRI, r3
}
 800546e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	20000008 	.word	0x20000008

08005480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005480:	f3ef 8009 	mrs	r0, PSP
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	4b15      	ldr	r3, [pc, #84]	@ (80054e0 <pxCurrentTCBConst>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	f01e 0f10 	tst.w	lr, #16
 8005490:	bf08      	it	eq
 8005492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	6010      	str	r0, [r2, #0]
 800549c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054a4:	f380 8811 	msr	BASEPRI, r0
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f7fe fe9e 	bl	80041f0 <vTaskSwitchContext>
 80054b4:	f04f 0000 	mov.w	r0, #0
 80054b8:	f380 8811 	msr	BASEPRI, r0
 80054bc:	bc09      	pop	{r0, r3}
 80054be:	6819      	ldr	r1, [r3, #0]
 80054c0:	6808      	ldr	r0, [r1, #0]
 80054c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c6:	f01e 0f10 	tst.w	lr, #16
 80054ca:	bf08      	it	eq
 80054cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054d0:	f380 8809 	msr	PSP, r0
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	f3af 8000 	nop.w

080054e0 <pxCurrentTCBConst>:
 80054e0:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop

080054e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	607b      	str	r3, [r7, #4]
}
 8005500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005502:	f7fe fdbb 	bl	800407c <xTaskIncrementTick>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800550c:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <xPortSysTickHandler+0x40>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	2300      	movs	r3, #0
 8005516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f383 8811 	msr	BASEPRI, r3
}
 800551e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <vPortSetupTimerInterrupt+0x34>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005536:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <vPortSetupTimerInterrupt+0x38>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800553c:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <vPortSetupTimerInterrupt+0x3c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a0a      	ldr	r2, [pc, #40]	@ (800556c <vPortSetupTimerInterrupt+0x40>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	4a09      	ldr	r2, [pc, #36]	@ (8005570 <vPortSetupTimerInterrupt+0x44>)
 800554a:	3b01      	subs	r3, #1
 800554c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800554e:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <vPortSetupTimerInterrupt+0x34>)
 8005550:	2207      	movs	r2, #7
 8005552:	601a      	str	r2, [r3, #0]
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	e000e010 	.word	0xe000e010
 8005564:	e000e018 	.word	0xe000e018
 8005568:	20000000 	.word	0x20000000
 800556c:	10624dd3 	.word	0x10624dd3
 8005570:	e000e014 	.word	0xe000e014

08005574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005584 <vPortEnableVFP+0x10>
 8005578:	6801      	ldr	r1, [r0, #0]
 800557a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800557e:	6001      	str	r1, [r0, #0]
 8005580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005582:	bf00      	nop
 8005584:	e000ed88 	.word	0xe000ed88

08005588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800558e:	f3ef 8305 	mrs	r3, IPSR
 8005592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b0f      	cmp	r3, #15
 8005598:	d915      	bls.n	80055c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800559a:	4a18      	ldr	r2, [pc, #96]	@ (80055fc <vPortValidateInterruptPriority+0x74>)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055a4:	4b16      	ldr	r3, [pc, #88]	@ (8005600 <vPortValidateInterruptPriority+0x78>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	7afa      	ldrb	r2, [r7, #11]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d20b      	bcs.n	80055c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	607b      	str	r3, [r7, #4]
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	e7fd      	b.n	80055c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005604 <vPortValidateInterruptPriority+0x7c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005608 <vPortValidateInterruptPriority+0x80>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d90b      	bls.n	80055ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	603b      	str	r3, [r7, #0]
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	e7fd      	b.n	80055ea <vPortValidateInterruptPriority+0x62>
	}
 80055ee:	bf00      	nop
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	e000e3f0 	.word	0xe000e3f0
 8005600:	20000ed4 	.word	0x20000ed4
 8005604:	e000ed0c 	.word	0xe000ed0c
 8005608:	20000ed8 	.word	0x20000ed8

0800560c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	@ 0x28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005614:	2300      	movs	r3, #0
 8005616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005618:	f7fe fc74 	bl	8003f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800561c:	4b5c      	ldr	r3, [pc, #368]	@ (8005790 <pvPortMalloc+0x184>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005624:	f000 f924 	bl	8005870 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005628:	4b5a      	ldr	r3, [pc, #360]	@ (8005794 <pvPortMalloc+0x188>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 8095 	bne.w	8005760 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01e      	beq.n	800567a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800563c:	2208      	movs	r2, #8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4413      	add	r3, r2
 8005642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b00      	cmp	r3, #0
 800564c:	d015      	beq.n	800567a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f023 0307 	bic.w	r3, r3, #7
 8005654:	3308      	adds	r3, #8
 8005656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <pvPortMalloc+0x6e>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	617b      	str	r3, [r7, #20]
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	e7fd      	b.n	8005676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d06f      	beq.n	8005760 <pvPortMalloc+0x154>
 8005680:	4b45      	ldr	r3, [pc, #276]	@ (8005798 <pvPortMalloc+0x18c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d86a      	bhi.n	8005760 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800568a:	4b44      	ldr	r3, [pc, #272]	@ (800579c <pvPortMalloc+0x190>)
 800568c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800568e:	4b43      	ldr	r3, [pc, #268]	@ (800579c <pvPortMalloc+0x190>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005694:	e004      	b.n	80056a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d903      	bls.n	80056b2 <pvPortMalloc+0xa6>
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f1      	bne.n	8005696 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056b2:	4b37      	ldr	r3, [pc, #220]	@ (8005790 <pvPortMalloc+0x184>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d051      	beq.n	8005760 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2208      	movs	r2, #8
 80056c2:	4413      	add	r3, r2
 80056c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	2308      	movs	r3, #8
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	429a      	cmp	r2, r3
 80056dc:	d920      	bls.n	8005720 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00b      	beq.n	8005708 <pvPortMalloc+0xfc>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	613b      	str	r3, [r7, #16]
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800571a:	69b8      	ldr	r0, [r7, #24]
 800571c:	f000 f90a 	bl	8005934 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005720:	4b1d      	ldr	r3, [pc, #116]	@ (8005798 <pvPortMalloc+0x18c>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	4a1b      	ldr	r2, [pc, #108]	@ (8005798 <pvPortMalloc+0x18c>)
 800572c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800572e:	4b1a      	ldr	r3, [pc, #104]	@ (8005798 <pvPortMalloc+0x18c>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b1b      	ldr	r3, [pc, #108]	@ (80057a0 <pvPortMalloc+0x194>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d203      	bcs.n	8005742 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800573a:	4b17      	ldr	r3, [pc, #92]	@ (8005798 <pvPortMalloc+0x18c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a18      	ldr	r2, [pc, #96]	@ (80057a0 <pvPortMalloc+0x194>)
 8005740:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	4b13      	ldr	r3, [pc, #76]	@ (8005794 <pvPortMalloc+0x188>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	431a      	orrs	r2, r3
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005756:	4b13      	ldr	r3, [pc, #76]	@ (80057a4 <pvPortMalloc+0x198>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3301      	adds	r3, #1
 800575c:	4a11      	ldr	r2, [pc, #68]	@ (80057a4 <pvPortMalloc+0x198>)
 800575e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005760:	f7fe fbde 	bl	8003f20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <pvPortMalloc+0x17a>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	60fb      	str	r3, [r7, #12]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <pvPortMalloc+0x176>
	return pvReturn;
 8005786:	69fb      	ldr	r3, [r7, #28]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3728      	adds	r7, #40	@ 0x28
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20004ae4 	.word	0x20004ae4
 8005794:	20004af8 	.word	0x20004af8
 8005798:	20004ae8 	.word	0x20004ae8
 800579c:	20004adc 	.word	0x20004adc
 80057a0:	20004aec 	.word	0x20004aec
 80057a4:	20004af0 	.word	0x20004af0

080057a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d04f      	beq.n	800585a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057ba:	2308      	movs	r3, #8
 80057bc:	425b      	negs	r3, r3
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4413      	add	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	4b25      	ldr	r3, [pc, #148]	@ (8005864 <vPortFree+0xbc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <vPortFree+0x46>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	60fb      	str	r3, [r7, #12]
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	e7fd      	b.n	80057ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <vPortFree+0x66>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	60bb      	str	r3, [r7, #8]
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	4b14      	ldr	r3, [pc, #80]	@ (8005864 <vPortFree+0xbc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4013      	ands	r3, r2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01e      	beq.n	800585a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d11a      	bne.n	800585a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	4b0e      	ldr	r3, [pc, #56]	@ (8005864 <vPortFree+0xbc>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	43db      	mvns	r3, r3
 800582e:	401a      	ands	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005834:	f7fe fb66 	bl	8003f04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <vPortFree+0xc0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4413      	add	r3, r2
 8005842:	4a09      	ldr	r2, [pc, #36]	@ (8005868 <vPortFree+0xc0>)
 8005844:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005846:	6938      	ldr	r0, [r7, #16]
 8005848:	f000 f874 	bl	8005934 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800584c:	4b07      	ldr	r3, [pc, #28]	@ (800586c <vPortFree+0xc4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3301      	adds	r3, #1
 8005852:	4a06      	ldr	r2, [pc, #24]	@ (800586c <vPortFree+0xc4>)
 8005854:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005856:	f7fe fb63 	bl	8003f20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800585a:	bf00      	nop
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20004af8 	.word	0x20004af8
 8005868:	20004ae8 	.word	0x20004ae8
 800586c:	20004af4 	.word	0x20004af4

08005870 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005876:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800587a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800587c:	4b27      	ldr	r3, [pc, #156]	@ (800591c <prvHeapInit+0xac>)
 800587e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00c      	beq.n	80058a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3307      	adds	r3, #7
 800588e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0307 	bic.w	r3, r3, #7
 8005896:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	4a1f      	ldr	r2, [pc, #124]	@ (800591c <prvHeapInit+0xac>)
 80058a0:	4413      	add	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005920 <prvHeapInit+0xb0>)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005920 <prvHeapInit+0xb0>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	4413      	add	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058bc:	2208      	movs	r2, #8
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0307 	bic.w	r3, r3, #7
 80058ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4a15      	ldr	r2, [pc, #84]	@ (8005924 <prvHeapInit+0xb4>)
 80058d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058d2:	4b14      	ldr	r3, [pc, #80]	@ (8005924 <prvHeapInit+0xb4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058da:	4b12      	ldr	r3, [pc, #72]	@ (8005924 <prvHeapInit+0xb4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	1ad2      	subs	r2, r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005924 <prvHeapInit+0xb4>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005928 <prvHeapInit+0xb8>)
 80058fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4a09      	ldr	r2, [pc, #36]	@ (800592c <prvHeapInit+0xbc>)
 8005906:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005908:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <prvHeapInit+0xc0>)
 800590a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800590e:	601a      	str	r2, [r3, #0]
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	20000edc 	.word	0x20000edc
 8005920:	20004adc 	.word	0x20004adc
 8005924:	20004ae4 	.word	0x20004ae4
 8005928:	20004aec 	.word	0x20004aec
 800592c:	20004ae8 	.word	0x20004ae8
 8005930:	20004af8 	.word	0x20004af8

08005934 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800593c:	4b28      	ldr	r3, [pc, #160]	@ (80059e0 <prvInsertBlockIntoFreeList+0xac>)
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	e002      	b.n	8005948 <prvInsertBlockIntoFreeList+0x14>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	429a      	cmp	r2, r3
 8005950:	d8f7      	bhi.n	8005942 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	4413      	add	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	d108      	bne.n	8005976 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	441a      	add	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	441a      	add	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d118      	bne.n	80059bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	4b15      	ldr	r3, [pc, #84]	@ (80059e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d00d      	beq.n	80059b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	441a      	add	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e008      	b.n	80059c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059b2:	4b0c      	ldr	r3, [pc, #48]	@ (80059e4 <prvInsertBlockIntoFreeList+0xb0>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	e003      	b.n	80059c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d002      	beq.n	80059d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20004adc 	.word	0x20004adc
 80059e4:	20004ae4 	.word	0x20004ae4

080059e8 <siprintf>:
 80059e8:	b40e      	push	{r1, r2, r3}
 80059ea:	b510      	push	{r4, lr}
 80059ec:	b09d      	sub	sp, #116	@ 0x74
 80059ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80059f0:	9002      	str	r0, [sp, #8]
 80059f2:	9006      	str	r0, [sp, #24]
 80059f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059f8:	480a      	ldr	r0, [pc, #40]	@ (8005a24 <siprintf+0x3c>)
 80059fa:	9107      	str	r1, [sp, #28]
 80059fc:	9104      	str	r1, [sp, #16]
 80059fe:	490a      	ldr	r1, [pc, #40]	@ (8005a28 <siprintf+0x40>)
 8005a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a04:	9105      	str	r1, [sp, #20]
 8005a06:	2400      	movs	r4, #0
 8005a08:	a902      	add	r1, sp, #8
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a10:	f000 fa16 	bl	8005e40 <_svfiprintf_r>
 8005a14:	9b02      	ldr	r3, [sp, #8]
 8005a16:	701c      	strb	r4, [r3, #0]
 8005a18:	b01d      	add	sp, #116	@ 0x74
 8005a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a1e:	b003      	add	sp, #12
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	2000000c 	.word	0x2000000c
 8005a28:	ffff0208 	.word	0xffff0208

08005a2c <memset>:
 8005a2c:	4402      	add	r2, r0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d100      	bne.n	8005a36 <memset+0xa>
 8005a34:	4770      	bx	lr
 8005a36:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3a:	e7f9      	b.n	8005a30 <memset+0x4>

08005a3c <strstr>:
 8005a3c:	780a      	ldrb	r2, [r1, #0]
 8005a3e:	b570      	push	{r4, r5, r6, lr}
 8005a40:	b96a      	cbnz	r2, 8005a5e <strstr+0x22>
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d109      	bne.n	8005a5c <strstr+0x20>
 8005a48:	460c      	mov	r4, r1
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f6      	beq.n	8005a42 <strstr+0x6>
 8005a54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005a58:	429e      	cmp	r6, r3
 8005a5a:	d0f7      	beq.n	8005a4c <strstr+0x10>
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	7803      	ldrb	r3, [r0, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1ef      	bne.n	8005a44 <strstr+0x8>
 8005a64:	4618      	mov	r0, r3
 8005a66:	e7ec      	b.n	8005a42 <strstr+0x6>

08005a68 <_reclaim_reent>:
 8005a68:	4b2d      	ldr	r3, [pc, #180]	@ (8005b20 <_reclaim_reent+0xb8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4283      	cmp	r3, r0
 8005a6e:	b570      	push	{r4, r5, r6, lr}
 8005a70:	4604      	mov	r4, r0
 8005a72:	d053      	beq.n	8005b1c <_reclaim_reent+0xb4>
 8005a74:	69c3      	ldr	r3, [r0, #28]
 8005a76:	b31b      	cbz	r3, 8005ac0 <_reclaim_reent+0x58>
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	b163      	cbz	r3, 8005a96 <_reclaim_reent+0x2e>
 8005a7c:	2500      	movs	r5, #0
 8005a7e:	69e3      	ldr	r3, [r4, #28]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	5959      	ldr	r1, [r3, r5]
 8005a84:	b9b1      	cbnz	r1, 8005ab4 <_reclaim_reent+0x4c>
 8005a86:	3504      	adds	r5, #4
 8005a88:	2d80      	cmp	r5, #128	@ 0x80
 8005a8a:	d1f8      	bne.n	8005a7e <_reclaim_reent+0x16>
 8005a8c:	69e3      	ldr	r3, [r4, #28]
 8005a8e:	4620      	mov	r0, r4
 8005a90:	68d9      	ldr	r1, [r3, #12]
 8005a92:	f000 f881 	bl	8005b98 <_free_r>
 8005a96:	69e3      	ldr	r3, [r4, #28]
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	b111      	cbz	r1, 8005aa2 <_reclaim_reent+0x3a>
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 f87b 	bl	8005b98 <_free_r>
 8005aa2:	69e3      	ldr	r3, [r4, #28]
 8005aa4:	689d      	ldr	r5, [r3, #8]
 8005aa6:	b15d      	cbz	r5, 8005ac0 <_reclaim_reent+0x58>
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4620      	mov	r0, r4
 8005aac:	682d      	ldr	r5, [r5, #0]
 8005aae:	f000 f873 	bl	8005b98 <_free_r>
 8005ab2:	e7f8      	b.n	8005aa6 <_reclaim_reent+0x3e>
 8005ab4:	680e      	ldr	r6, [r1, #0]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 f86e 	bl	8005b98 <_free_r>
 8005abc:	4631      	mov	r1, r6
 8005abe:	e7e1      	b.n	8005a84 <_reclaim_reent+0x1c>
 8005ac0:	6961      	ldr	r1, [r4, #20]
 8005ac2:	b111      	cbz	r1, 8005aca <_reclaim_reent+0x62>
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 f867 	bl	8005b98 <_free_r>
 8005aca:	69e1      	ldr	r1, [r4, #28]
 8005acc:	b111      	cbz	r1, 8005ad4 <_reclaim_reent+0x6c>
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f000 f862 	bl	8005b98 <_free_r>
 8005ad4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005ad6:	b111      	cbz	r1, 8005ade <_reclaim_reent+0x76>
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f000 f85d 	bl	8005b98 <_free_r>
 8005ade:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ae0:	b111      	cbz	r1, 8005ae8 <_reclaim_reent+0x80>
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 f858 	bl	8005b98 <_free_r>
 8005ae8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005aea:	b111      	cbz	r1, 8005af2 <_reclaim_reent+0x8a>
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 f853 	bl	8005b98 <_free_r>
 8005af2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005af4:	b111      	cbz	r1, 8005afc <_reclaim_reent+0x94>
 8005af6:	4620      	mov	r0, r4
 8005af8:	f000 f84e 	bl	8005b98 <_free_r>
 8005afc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005afe:	b111      	cbz	r1, 8005b06 <_reclaim_reent+0x9e>
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 f849 	bl	8005b98 <_free_r>
 8005b06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005b08:	b111      	cbz	r1, 8005b10 <_reclaim_reent+0xa8>
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f000 f844 	bl	8005b98 <_free_r>
 8005b10:	6a23      	ldr	r3, [r4, #32]
 8005b12:	b11b      	cbz	r3, 8005b1c <_reclaim_reent+0xb4>
 8005b14:	4620      	mov	r0, r4
 8005b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b1a:	4718      	bx	r3
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
 8005b1e:	bf00      	nop
 8005b20:	2000000c 	.word	0x2000000c

08005b24 <__errno>:
 8005b24:	4b01      	ldr	r3, [pc, #4]	@ (8005b2c <__errno+0x8>)
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	2000000c 	.word	0x2000000c

08005b30 <__libc_init_array>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	4d0d      	ldr	r5, [pc, #52]	@ (8005b68 <__libc_init_array+0x38>)
 8005b34:	4c0d      	ldr	r4, [pc, #52]	@ (8005b6c <__libc_init_array+0x3c>)
 8005b36:	1b64      	subs	r4, r4, r5
 8005b38:	10a4      	asrs	r4, r4, #2
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	42a6      	cmp	r6, r4
 8005b3e:	d109      	bne.n	8005b54 <__libc_init_array+0x24>
 8005b40:	4d0b      	ldr	r5, [pc, #44]	@ (8005b70 <__libc_init_array+0x40>)
 8005b42:	4c0c      	ldr	r4, [pc, #48]	@ (8005b74 <__libc_init_array+0x44>)
 8005b44:	f000 fc64 	bl	8006410 <_init>
 8005b48:	1b64      	subs	r4, r4, r5
 8005b4a:	10a4      	asrs	r4, r4, #2
 8005b4c:	2600      	movs	r6, #0
 8005b4e:	42a6      	cmp	r6, r4
 8005b50:	d105      	bne.n	8005b5e <__libc_init_array+0x2e>
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b58:	4798      	blx	r3
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	e7ee      	b.n	8005b3c <__libc_init_array+0xc>
 8005b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b62:	4798      	blx	r3
 8005b64:	3601      	adds	r6, #1
 8005b66:	e7f2      	b.n	8005b4e <__libc_init_array+0x1e>
 8005b68:	080064f4 	.word	0x080064f4
 8005b6c:	080064f4 	.word	0x080064f4
 8005b70:	080064f4 	.word	0x080064f4
 8005b74:	080064f8 	.word	0x080064f8

08005b78 <__retarget_lock_acquire_recursive>:
 8005b78:	4770      	bx	lr

08005b7a <__retarget_lock_release_recursive>:
 8005b7a:	4770      	bx	lr

08005b7c <memcpy>:
 8005b7c:	440a      	add	r2, r1
 8005b7e:	4291      	cmp	r1, r2
 8005b80:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005b84:	d100      	bne.n	8005b88 <memcpy+0xc>
 8005b86:	4770      	bx	lr
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b92:	4291      	cmp	r1, r2
 8005b94:	d1f9      	bne.n	8005b8a <memcpy+0xe>
 8005b96:	bd10      	pop	{r4, pc}

08005b98 <_free_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	d041      	beq.n	8005c24 <_free_r+0x8c>
 8005ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba4:	1f0c      	subs	r4, r1, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfb8      	it	lt
 8005baa:	18e4      	addlt	r4, r4, r3
 8005bac:	f000 f8e0 	bl	8005d70 <__malloc_lock>
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c28 <_free_r+0x90>)
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	b933      	cbnz	r3, 8005bc4 <_free_r+0x2c>
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	6014      	str	r4, [r2, #0]
 8005bba:	4628      	mov	r0, r5
 8005bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bc0:	f000 b8dc 	b.w	8005d7c <__malloc_unlock>
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	d908      	bls.n	8005bda <_free_r+0x42>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	1821      	adds	r1, r4, r0
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	bf01      	itttt	eq
 8005bd0:	6819      	ldreq	r1, [r3, #0]
 8005bd2:	685b      	ldreq	r3, [r3, #4]
 8005bd4:	1809      	addeq	r1, r1, r0
 8005bd6:	6021      	streq	r1, [r4, #0]
 8005bd8:	e7ed      	b.n	8005bb6 <_free_r+0x1e>
 8005bda:	461a      	mov	r2, r3
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	b10b      	cbz	r3, 8005be4 <_free_r+0x4c>
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	d9fa      	bls.n	8005bda <_free_r+0x42>
 8005be4:	6811      	ldr	r1, [r2, #0]
 8005be6:	1850      	adds	r0, r2, r1
 8005be8:	42a0      	cmp	r0, r4
 8005bea:	d10b      	bne.n	8005c04 <_free_r+0x6c>
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	4401      	add	r1, r0
 8005bf0:	1850      	adds	r0, r2, r1
 8005bf2:	4283      	cmp	r3, r0
 8005bf4:	6011      	str	r1, [r2, #0]
 8005bf6:	d1e0      	bne.n	8005bba <_free_r+0x22>
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	6053      	str	r3, [r2, #4]
 8005bfe:	4408      	add	r0, r1
 8005c00:	6010      	str	r0, [r2, #0]
 8005c02:	e7da      	b.n	8005bba <_free_r+0x22>
 8005c04:	d902      	bls.n	8005c0c <_free_r+0x74>
 8005c06:	230c      	movs	r3, #12
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	e7d6      	b.n	8005bba <_free_r+0x22>
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	1821      	adds	r1, r4, r0
 8005c10:	428b      	cmp	r3, r1
 8005c12:	bf04      	itt	eq
 8005c14:	6819      	ldreq	r1, [r3, #0]
 8005c16:	685b      	ldreq	r3, [r3, #4]
 8005c18:	6063      	str	r3, [r4, #4]
 8005c1a:	bf04      	itt	eq
 8005c1c:	1809      	addeq	r1, r1, r0
 8005c1e:	6021      	streq	r1, [r4, #0]
 8005c20:	6054      	str	r4, [r2, #4]
 8005c22:	e7ca      	b.n	8005bba <_free_r+0x22>
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
 8005c26:	bf00      	nop
 8005c28:	20004c40 	.word	0x20004c40

08005c2c <sbrk_aligned>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c6c <sbrk_aligned+0x40>)
 8005c30:	460c      	mov	r4, r1
 8005c32:	6831      	ldr	r1, [r6, #0]
 8005c34:	4605      	mov	r5, r0
 8005c36:	b911      	cbnz	r1, 8005c3e <sbrk_aligned+0x12>
 8005c38:	f000 fba4 	bl	8006384 <_sbrk_r>
 8005c3c:	6030      	str	r0, [r6, #0]
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 fb9f 	bl	8006384 <_sbrk_r>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	d103      	bne.n	8005c52 <sbrk_aligned+0x26>
 8005c4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005c4e:	4620      	mov	r0, r4
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
 8005c52:	1cc4      	adds	r4, r0, #3
 8005c54:	f024 0403 	bic.w	r4, r4, #3
 8005c58:	42a0      	cmp	r0, r4
 8005c5a:	d0f8      	beq.n	8005c4e <sbrk_aligned+0x22>
 8005c5c:	1a21      	subs	r1, r4, r0
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 fb90 	bl	8006384 <_sbrk_r>
 8005c64:	3001      	adds	r0, #1
 8005c66:	d1f2      	bne.n	8005c4e <sbrk_aligned+0x22>
 8005c68:	e7ef      	b.n	8005c4a <sbrk_aligned+0x1e>
 8005c6a:	bf00      	nop
 8005c6c:	20004c3c 	.word	0x20004c3c

08005c70 <_malloc_r>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	1ccd      	adds	r5, r1, #3
 8005c76:	f025 0503 	bic.w	r5, r5, #3
 8005c7a:	3508      	adds	r5, #8
 8005c7c:	2d0c      	cmp	r5, #12
 8005c7e:	bf38      	it	cc
 8005c80:	250c      	movcc	r5, #12
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	4606      	mov	r6, r0
 8005c86:	db01      	blt.n	8005c8c <_malloc_r+0x1c>
 8005c88:	42a9      	cmp	r1, r5
 8005c8a:	d904      	bls.n	8005c96 <_malloc_r+0x26>
 8005c8c:	230c      	movs	r3, #12
 8005c8e:	6033      	str	r3, [r6, #0]
 8005c90:	2000      	movs	r0, #0
 8005c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d6c <_malloc_r+0xfc>
 8005c9a:	f000 f869 	bl	8005d70 <__malloc_lock>
 8005c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca2:	461c      	mov	r4, r3
 8005ca4:	bb44      	cbnz	r4, 8005cf8 <_malloc_r+0x88>
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7ff ffbf 	bl	8005c2c <sbrk_aligned>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	d158      	bne.n	8005d66 <_malloc_r+0xf6>
 8005cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8005cb8:	4627      	mov	r7, r4
 8005cba:	2f00      	cmp	r7, #0
 8005cbc:	d143      	bne.n	8005d46 <_malloc_r+0xd6>
 8005cbe:	2c00      	cmp	r4, #0
 8005cc0:	d04b      	beq.n	8005d5a <_malloc_r+0xea>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	4639      	mov	r1, r7
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	eb04 0903 	add.w	r9, r4, r3
 8005ccc:	f000 fb5a 	bl	8006384 <_sbrk_r>
 8005cd0:	4581      	cmp	r9, r0
 8005cd2:	d142      	bne.n	8005d5a <_malloc_r+0xea>
 8005cd4:	6821      	ldr	r1, [r4, #0]
 8005cd6:	1a6d      	subs	r5, r5, r1
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7ff ffa6 	bl	8005c2c <sbrk_aligned>
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d03a      	beq.n	8005d5a <_malloc_r+0xea>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	442b      	add	r3, r5
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	f8d8 3000 	ldr.w	r3, [r8]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	bb62      	cbnz	r2, 8005d4c <_malloc_r+0xdc>
 8005cf2:	f8c8 7000 	str.w	r7, [r8]
 8005cf6:	e00f      	b.n	8005d18 <_malloc_r+0xa8>
 8005cf8:	6822      	ldr	r2, [r4, #0]
 8005cfa:	1b52      	subs	r2, r2, r5
 8005cfc:	d420      	bmi.n	8005d40 <_malloc_r+0xd0>
 8005cfe:	2a0b      	cmp	r2, #11
 8005d00:	d917      	bls.n	8005d32 <_malloc_r+0xc2>
 8005d02:	1961      	adds	r1, r4, r5
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	6025      	str	r5, [r4, #0]
 8005d08:	bf18      	it	ne
 8005d0a:	6059      	strne	r1, [r3, #4]
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	bf08      	it	eq
 8005d10:	f8c8 1000 	streq.w	r1, [r8]
 8005d14:	5162      	str	r2, [r4, r5]
 8005d16:	604b      	str	r3, [r1, #4]
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f82f 	bl	8005d7c <__malloc_unlock>
 8005d1e:	f104 000b 	add.w	r0, r4, #11
 8005d22:	1d23      	adds	r3, r4, #4
 8005d24:	f020 0007 	bic.w	r0, r0, #7
 8005d28:	1ac2      	subs	r2, r0, r3
 8005d2a:	bf1c      	itt	ne
 8005d2c:	1a1b      	subne	r3, r3, r0
 8005d2e:	50a3      	strne	r3, [r4, r2]
 8005d30:	e7af      	b.n	8005c92 <_malloc_r+0x22>
 8005d32:	6862      	ldr	r2, [r4, #4]
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	bf0c      	ite	eq
 8005d38:	f8c8 2000 	streq.w	r2, [r8]
 8005d3c:	605a      	strne	r2, [r3, #4]
 8005d3e:	e7eb      	b.n	8005d18 <_malloc_r+0xa8>
 8005d40:	4623      	mov	r3, r4
 8005d42:	6864      	ldr	r4, [r4, #4]
 8005d44:	e7ae      	b.n	8005ca4 <_malloc_r+0x34>
 8005d46:	463c      	mov	r4, r7
 8005d48:	687f      	ldr	r7, [r7, #4]
 8005d4a:	e7b6      	b.n	8005cba <_malloc_r+0x4a>
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d1fb      	bne.n	8005d4c <_malloc_r+0xdc>
 8005d54:	2300      	movs	r3, #0
 8005d56:	6053      	str	r3, [r2, #4]
 8005d58:	e7de      	b.n	8005d18 <_malloc_r+0xa8>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f000 f80c 	bl	8005d7c <__malloc_unlock>
 8005d64:	e794      	b.n	8005c90 <_malloc_r+0x20>
 8005d66:	6005      	str	r5, [r0, #0]
 8005d68:	e7d6      	b.n	8005d18 <_malloc_r+0xa8>
 8005d6a:	bf00      	nop
 8005d6c:	20004c40 	.word	0x20004c40

08005d70 <__malloc_lock>:
 8005d70:	4801      	ldr	r0, [pc, #4]	@ (8005d78 <__malloc_lock+0x8>)
 8005d72:	f7ff bf01 	b.w	8005b78 <__retarget_lock_acquire_recursive>
 8005d76:	bf00      	nop
 8005d78:	20004c38 	.word	0x20004c38

08005d7c <__malloc_unlock>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	@ (8005d84 <__malloc_unlock+0x8>)
 8005d7e:	f7ff befc 	b.w	8005b7a <__retarget_lock_release_recursive>
 8005d82:	bf00      	nop
 8005d84:	20004c38 	.word	0x20004c38

08005d88 <__ssputs_r>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	688e      	ldr	r6, [r1, #8]
 8005d8e:	461f      	mov	r7, r3
 8005d90:	42be      	cmp	r6, r7
 8005d92:	680b      	ldr	r3, [r1, #0]
 8005d94:	4682      	mov	sl, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	4690      	mov	r8, r2
 8005d9a:	d82d      	bhi.n	8005df8 <__ssputs_r+0x70>
 8005d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005da0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005da4:	d026      	beq.n	8005df4 <__ssputs_r+0x6c>
 8005da6:	6965      	ldr	r5, [r4, #20]
 8005da8:	6909      	ldr	r1, [r1, #16]
 8005daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dae:	eba3 0901 	sub.w	r9, r3, r1
 8005db2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005db6:	1c7b      	adds	r3, r7, #1
 8005db8:	444b      	add	r3, r9
 8005dba:	106d      	asrs	r5, r5, #1
 8005dbc:	429d      	cmp	r5, r3
 8005dbe:	bf38      	it	cc
 8005dc0:	461d      	movcc	r5, r3
 8005dc2:	0553      	lsls	r3, r2, #21
 8005dc4:	d527      	bpl.n	8005e16 <__ssputs_r+0x8e>
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	f7ff ff52 	bl	8005c70 <_malloc_r>
 8005dcc:	4606      	mov	r6, r0
 8005dce:	b360      	cbz	r0, 8005e2a <__ssputs_r+0xa2>
 8005dd0:	6921      	ldr	r1, [r4, #16]
 8005dd2:	464a      	mov	r2, r9
 8005dd4:	f7ff fed2 	bl	8005b7c <memcpy>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de2:	81a3      	strh	r3, [r4, #12]
 8005de4:	6126      	str	r6, [r4, #16]
 8005de6:	6165      	str	r5, [r4, #20]
 8005de8:	444e      	add	r6, r9
 8005dea:	eba5 0509 	sub.w	r5, r5, r9
 8005dee:	6026      	str	r6, [r4, #0]
 8005df0:	60a5      	str	r5, [r4, #8]
 8005df2:	463e      	mov	r6, r7
 8005df4:	42be      	cmp	r6, r7
 8005df6:	d900      	bls.n	8005dfa <__ssputs_r+0x72>
 8005df8:	463e      	mov	r6, r7
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	4641      	mov	r1, r8
 8005e00:	f000 faa6 	bl	8006350 <memmove>
 8005e04:	68a3      	ldr	r3, [r4, #8]
 8005e06:	1b9b      	subs	r3, r3, r6
 8005e08:	60a3      	str	r3, [r4, #8]
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	4433      	add	r3, r6
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	2000      	movs	r0, #0
 8005e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e16:	462a      	mov	r2, r5
 8005e18:	f000 fac4 	bl	80063a4 <_realloc_r>
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d1e0      	bne.n	8005de4 <__ssputs_r+0x5c>
 8005e22:	6921      	ldr	r1, [r4, #16]
 8005e24:	4650      	mov	r0, sl
 8005e26:	f7ff feb7 	bl	8005b98 <_free_r>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	f8ca 3000 	str.w	r3, [sl]
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e3c:	e7e9      	b.n	8005e12 <__ssputs_r+0x8a>
	...

08005e40 <_svfiprintf_r>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	4698      	mov	r8, r3
 8005e46:	898b      	ldrh	r3, [r1, #12]
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	b09d      	sub	sp, #116	@ 0x74
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	460d      	mov	r5, r1
 8005e50:	4614      	mov	r4, r2
 8005e52:	d510      	bpl.n	8005e76 <_svfiprintf_r+0x36>
 8005e54:	690b      	ldr	r3, [r1, #16]
 8005e56:	b973      	cbnz	r3, 8005e76 <_svfiprintf_r+0x36>
 8005e58:	2140      	movs	r1, #64	@ 0x40
 8005e5a:	f7ff ff09 	bl	8005c70 <_malloc_r>
 8005e5e:	6028      	str	r0, [r5, #0]
 8005e60:	6128      	str	r0, [r5, #16]
 8005e62:	b930      	cbnz	r0, 8005e72 <_svfiprintf_r+0x32>
 8005e64:	230c      	movs	r3, #12
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e6c:	b01d      	add	sp, #116	@ 0x74
 8005e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e72:	2340      	movs	r3, #64	@ 0x40
 8005e74:	616b      	str	r3, [r5, #20]
 8005e76:	2300      	movs	r3, #0
 8005e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e84:	2330      	movs	r3, #48	@ 0x30
 8005e86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006024 <_svfiprintf_r+0x1e4>
 8005e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e8e:	f04f 0901 	mov.w	r9, #1
 8005e92:	4623      	mov	r3, r4
 8005e94:	469a      	mov	sl, r3
 8005e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e9a:	b10a      	cbz	r2, 8005ea0 <_svfiprintf_r+0x60>
 8005e9c:	2a25      	cmp	r2, #37	@ 0x25
 8005e9e:	d1f9      	bne.n	8005e94 <_svfiprintf_r+0x54>
 8005ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ea4:	d00b      	beq.n	8005ebe <_svfiprintf_r+0x7e>
 8005ea6:	465b      	mov	r3, fp
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	4629      	mov	r1, r5
 8005eac:	4638      	mov	r0, r7
 8005eae:	f7ff ff6b 	bl	8005d88 <__ssputs_r>
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	f000 80a7 	beq.w	8006006 <_svfiprintf_r+0x1c6>
 8005eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eba:	445a      	add	r2, fp
 8005ebc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 809f 	beq.w	8006006 <_svfiprintf_r+0x1c6>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ed2:	f10a 0a01 	add.w	sl, sl, #1
 8005ed6:	9304      	str	r3, [sp, #16]
 8005ed8:	9307      	str	r3, [sp, #28]
 8005eda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ede:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ee0:	4654      	mov	r4, sl
 8005ee2:	2205      	movs	r2, #5
 8005ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee8:	484e      	ldr	r0, [pc, #312]	@ (8006024 <_svfiprintf_r+0x1e4>)
 8005eea:	f7fa f979 	bl	80001e0 <memchr>
 8005eee:	9a04      	ldr	r2, [sp, #16]
 8005ef0:	b9d8      	cbnz	r0, 8005f2a <_svfiprintf_r+0xea>
 8005ef2:	06d0      	lsls	r0, r2, #27
 8005ef4:	bf44      	itt	mi
 8005ef6:	2320      	movmi	r3, #32
 8005ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005efc:	0711      	lsls	r1, r2, #28
 8005efe:	bf44      	itt	mi
 8005f00:	232b      	movmi	r3, #43	@ 0x2b
 8005f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f06:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f0c:	d015      	beq.n	8005f3a <_svfiprintf_r+0xfa>
 8005f0e:	9a07      	ldr	r2, [sp, #28]
 8005f10:	4654      	mov	r4, sl
 8005f12:	2000      	movs	r0, #0
 8005f14:	f04f 0c0a 	mov.w	ip, #10
 8005f18:	4621      	mov	r1, r4
 8005f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f1e:	3b30      	subs	r3, #48	@ 0x30
 8005f20:	2b09      	cmp	r3, #9
 8005f22:	d94b      	bls.n	8005fbc <_svfiprintf_r+0x17c>
 8005f24:	b1b0      	cbz	r0, 8005f54 <_svfiprintf_r+0x114>
 8005f26:	9207      	str	r2, [sp, #28]
 8005f28:	e014      	b.n	8005f54 <_svfiprintf_r+0x114>
 8005f2a:	eba0 0308 	sub.w	r3, r0, r8
 8005f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	46a2      	mov	sl, r4
 8005f38:	e7d2      	b.n	8005ee0 <_svfiprintf_r+0xa0>
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	1d19      	adds	r1, r3, #4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	9103      	str	r1, [sp, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bfbb      	ittet	lt
 8005f46:	425b      	neglt	r3, r3
 8005f48:	f042 0202 	orrlt.w	r2, r2, #2
 8005f4c:	9307      	strge	r3, [sp, #28]
 8005f4e:	9307      	strlt	r3, [sp, #28]
 8005f50:	bfb8      	it	lt
 8005f52:	9204      	strlt	r2, [sp, #16]
 8005f54:	7823      	ldrb	r3, [r4, #0]
 8005f56:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f58:	d10a      	bne.n	8005f70 <_svfiprintf_r+0x130>
 8005f5a:	7863      	ldrb	r3, [r4, #1]
 8005f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f5e:	d132      	bne.n	8005fc6 <_svfiprintf_r+0x186>
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	1d1a      	adds	r2, r3, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	9203      	str	r2, [sp, #12]
 8005f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f6c:	3402      	adds	r4, #2
 8005f6e:	9305      	str	r3, [sp, #20]
 8005f70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006034 <_svfiprintf_r+0x1f4>
 8005f74:	7821      	ldrb	r1, [r4, #0]
 8005f76:	2203      	movs	r2, #3
 8005f78:	4650      	mov	r0, sl
 8005f7a:	f7fa f931 	bl	80001e0 <memchr>
 8005f7e:	b138      	cbz	r0, 8005f90 <_svfiprintf_r+0x150>
 8005f80:	9b04      	ldr	r3, [sp, #16]
 8005f82:	eba0 000a 	sub.w	r0, r0, sl
 8005f86:	2240      	movs	r2, #64	@ 0x40
 8005f88:	4082      	lsls	r2, r0
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	3401      	adds	r4, #1
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f94:	4824      	ldr	r0, [pc, #144]	@ (8006028 <_svfiprintf_r+0x1e8>)
 8005f96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f9a:	2206      	movs	r2, #6
 8005f9c:	f7fa f920 	bl	80001e0 <memchr>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d036      	beq.n	8006012 <_svfiprintf_r+0x1d2>
 8005fa4:	4b21      	ldr	r3, [pc, #132]	@ (800602c <_svfiprintf_r+0x1ec>)
 8005fa6:	bb1b      	cbnz	r3, 8005ff0 <_svfiprintf_r+0x1b0>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	3307      	adds	r3, #7
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	9303      	str	r3, [sp, #12]
 8005fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb6:	4433      	add	r3, r6
 8005fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fba:	e76a      	b.n	8005e92 <_svfiprintf_r+0x52>
 8005fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e7a8      	b.n	8005f18 <_svfiprintf_r+0xd8>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	3401      	adds	r4, #1
 8005fca:	9305      	str	r3, [sp, #20]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f04f 0c0a 	mov.w	ip, #10
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd8:	3a30      	subs	r2, #48	@ 0x30
 8005fda:	2a09      	cmp	r2, #9
 8005fdc:	d903      	bls.n	8005fe6 <_svfiprintf_r+0x1a6>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0c6      	beq.n	8005f70 <_svfiprintf_r+0x130>
 8005fe2:	9105      	str	r1, [sp, #20]
 8005fe4:	e7c4      	b.n	8005f70 <_svfiprintf_r+0x130>
 8005fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fea:	4604      	mov	r4, r0
 8005fec:	2301      	movs	r3, #1
 8005fee:	e7f0      	b.n	8005fd2 <_svfiprintf_r+0x192>
 8005ff0:	ab03      	add	r3, sp, #12
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8006030 <_svfiprintf_r+0x1f0>)
 8005ff8:	a904      	add	r1, sp, #16
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	f3af 8000 	nop.w
 8006000:	1c42      	adds	r2, r0, #1
 8006002:	4606      	mov	r6, r0
 8006004:	d1d6      	bne.n	8005fb4 <_svfiprintf_r+0x174>
 8006006:	89ab      	ldrh	r3, [r5, #12]
 8006008:	065b      	lsls	r3, r3, #25
 800600a:	f53f af2d 	bmi.w	8005e68 <_svfiprintf_r+0x28>
 800600e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006010:	e72c      	b.n	8005e6c <_svfiprintf_r+0x2c>
 8006012:	ab03      	add	r3, sp, #12
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	462a      	mov	r2, r5
 8006018:	4b05      	ldr	r3, [pc, #20]	@ (8006030 <_svfiprintf_r+0x1f0>)
 800601a:	a904      	add	r1, sp, #16
 800601c:	4638      	mov	r0, r7
 800601e:	f000 f879 	bl	8006114 <_printf_i>
 8006022:	e7ed      	b.n	8006000 <_svfiprintf_r+0x1c0>
 8006024:	080064b8 	.word	0x080064b8
 8006028:	080064c2 	.word	0x080064c2
 800602c:	00000000 	.word	0x00000000
 8006030:	08005d89 	.word	0x08005d89
 8006034:	080064be 	.word	0x080064be

08006038 <_printf_common>:
 8006038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800603c:	4616      	mov	r6, r2
 800603e:	4698      	mov	r8, r3
 8006040:	688a      	ldr	r2, [r1, #8]
 8006042:	690b      	ldr	r3, [r1, #16]
 8006044:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006048:	4293      	cmp	r3, r2
 800604a:	bfb8      	it	lt
 800604c:	4613      	movlt	r3, r2
 800604e:	6033      	str	r3, [r6, #0]
 8006050:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006054:	4607      	mov	r7, r0
 8006056:	460c      	mov	r4, r1
 8006058:	b10a      	cbz	r2, 800605e <_printf_common+0x26>
 800605a:	3301      	adds	r3, #1
 800605c:	6033      	str	r3, [r6, #0]
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	0699      	lsls	r1, r3, #26
 8006062:	bf42      	ittt	mi
 8006064:	6833      	ldrmi	r3, [r6, #0]
 8006066:	3302      	addmi	r3, #2
 8006068:	6033      	strmi	r3, [r6, #0]
 800606a:	6825      	ldr	r5, [r4, #0]
 800606c:	f015 0506 	ands.w	r5, r5, #6
 8006070:	d106      	bne.n	8006080 <_printf_common+0x48>
 8006072:	f104 0a19 	add.w	sl, r4, #25
 8006076:	68e3      	ldr	r3, [r4, #12]
 8006078:	6832      	ldr	r2, [r6, #0]
 800607a:	1a9b      	subs	r3, r3, r2
 800607c:	42ab      	cmp	r3, r5
 800607e:	dc26      	bgt.n	80060ce <_printf_common+0x96>
 8006080:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	3b00      	subs	r3, #0
 8006088:	bf18      	it	ne
 800608a:	2301      	movne	r3, #1
 800608c:	0692      	lsls	r2, r2, #26
 800608e:	d42b      	bmi.n	80060e8 <_printf_common+0xb0>
 8006090:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006094:	4641      	mov	r1, r8
 8006096:	4638      	mov	r0, r7
 8006098:	47c8      	blx	r9
 800609a:	3001      	adds	r0, #1
 800609c:	d01e      	beq.n	80060dc <_printf_common+0xa4>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	6922      	ldr	r2, [r4, #16]
 80060a2:	f003 0306 	and.w	r3, r3, #6
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	bf02      	ittt	eq
 80060aa:	68e5      	ldreq	r5, [r4, #12]
 80060ac:	6833      	ldreq	r3, [r6, #0]
 80060ae:	1aed      	subeq	r5, r5, r3
 80060b0:	68a3      	ldr	r3, [r4, #8]
 80060b2:	bf0c      	ite	eq
 80060b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b8:	2500      	movne	r5, #0
 80060ba:	4293      	cmp	r3, r2
 80060bc:	bfc4      	itt	gt
 80060be:	1a9b      	subgt	r3, r3, r2
 80060c0:	18ed      	addgt	r5, r5, r3
 80060c2:	2600      	movs	r6, #0
 80060c4:	341a      	adds	r4, #26
 80060c6:	42b5      	cmp	r5, r6
 80060c8:	d11a      	bne.n	8006100 <_printf_common+0xc8>
 80060ca:	2000      	movs	r0, #0
 80060cc:	e008      	b.n	80060e0 <_printf_common+0xa8>
 80060ce:	2301      	movs	r3, #1
 80060d0:	4652      	mov	r2, sl
 80060d2:	4641      	mov	r1, r8
 80060d4:	4638      	mov	r0, r7
 80060d6:	47c8      	blx	r9
 80060d8:	3001      	adds	r0, #1
 80060da:	d103      	bne.n	80060e4 <_printf_common+0xac>
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e4:	3501      	adds	r5, #1
 80060e6:	e7c6      	b.n	8006076 <_printf_common+0x3e>
 80060e8:	18e1      	adds	r1, r4, r3
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	2030      	movs	r0, #48	@ 0x30
 80060ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060f2:	4422      	add	r2, r4
 80060f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060fc:	3302      	adds	r3, #2
 80060fe:	e7c7      	b.n	8006090 <_printf_common+0x58>
 8006100:	2301      	movs	r3, #1
 8006102:	4622      	mov	r2, r4
 8006104:	4641      	mov	r1, r8
 8006106:	4638      	mov	r0, r7
 8006108:	47c8      	blx	r9
 800610a:	3001      	adds	r0, #1
 800610c:	d0e6      	beq.n	80060dc <_printf_common+0xa4>
 800610e:	3601      	adds	r6, #1
 8006110:	e7d9      	b.n	80060c6 <_printf_common+0x8e>
	...

08006114 <_printf_i>:
 8006114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006118:	7e0f      	ldrb	r7, [r1, #24]
 800611a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800611c:	2f78      	cmp	r7, #120	@ 0x78
 800611e:	4691      	mov	r9, r2
 8006120:	4680      	mov	r8, r0
 8006122:	460c      	mov	r4, r1
 8006124:	469a      	mov	sl, r3
 8006126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800612a:	d807      	bhi.n	800613c <_printf_i+0x28>
 800612c:	2f62      	cmp	r7, #98	@ 0x62
 800612e:	d80a      	bhi.n	8006146 <_printf_i+0x32>
 8006130:	2f00      	cmp	r7, #0
 8006132:	f000 80d1 	beq.w	80062d8 <_printf_i+0x1c4>
 8006136:	2f58      	cmp	r7, #88	@ 0x58
 8006138:	f000 80b8 	beq.w	80062ac <_printf_i+0x198>
 800613c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006144:	e03a      	b.n	80061bc <_printf_i+0xa8>
 8006146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800614a:	2b15      	cmp	r3, #21
 800614c:	d8f6      	bhi.n	800613c <_printf_i+0x28>
 800614e:	a101      	add	r1, pc, #4	@ (adr r1, 8006154 <_printf_i+0x40>)
 8006150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006154:	080061ad 	.word	0x080061ad
 8006158:	080061c1 	.word	0x080061c1
 800615c:	0800613d 	.word	0x0800613d
 8006160:	0800613d 	.word	0x0800613d
 8006164:	0800613d 	.word	0x0800613d
 8006168:	0800613d 	.word	0x0800613d
 800616c:	080061c1 	.word	0x080061c1
 8006170:	0800613d 	.word	0x0800613d
 8006174:	0800613d 	.word	0x0800613d
 8006178:	0800613d 	.word	0x0800613d
 800617c:	0800613d 	.word	0x0800613d
 8006180:	080062bf 	.word	0x080062bf
 8006184:	080061eb 	.word	0x080061eb
 8006188:	08006279 	.word	0x08006279
 800618c:	0800613d 	.word	0x0800613d
 8006190:	0800613d 	.word	0x0800613d
 8006194:	080062e1 	.word	0x080062e1
 8006198:	0800613d 	.word	0x0800613d
 800619c:	080061eb 	.word	0x080061eb
 80061a0:	0800613d 	.word	0x0800613d
 80061a4:	0800613d 	.word	0x0800613d
 80061a8:	08006281 	.word	0x08006281
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	1d1a      	adds	r2, r3, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6032      	str	r2, [r6, #0]
 80061b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061bc:	2301      	movs	r3, #1
 80061be:	e09c      	b.n	80062fa <_printf_i+0x1e6>
 80061c0:	6833      	ldr	r3, [r6, #0]
 80061c2:	6820      	ldr	r0, [r4, #0]
 80061c4:	1d19      	adds	r1, r3, #4
 80061c6:	6031      	str	r1, [r6, #0]
 80061c8:	0606      	lsls	r6, r0, #24
 80061ca:	d501      	bpl.n	80061d0 <_printf_i+0xbc>
 80061cc:	681d      	ldr	r5, [r3, #0]
 80061ce:	e003      	b.n	80061d8 <_printf_i+0xc4>
 80061d0:	0645      	lsls	r5, r0, #25
 80061d2:	d5fb      	bpl.n	80061cc <_printf_i+0xb8>
 80061d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061d8:	2d00      	cmp	r5, #0
 80061da:	da03      	bge.n	80061e4 <_printf_i+0xd0>
 80061dc:	232d      	movs	r3, #45	@ 0x2d
 80061de:	426d      	negs	r5, r5
 80061e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e4:	4858      	ldr	r0, [pc, #352]	@ (8006348 <_printf_i+0x234>)
 80061e6:	230a      	movs	r3, #10
 80061e8:	e011      	b.n	800620e <_printf_i+0xfa>
 80061ea:	6821      	ldr	r1, [r4, #0]
 80061ec:	6833      	ldr	r3, [r6, #0]
 80061ee:	0608      	lsls	r0, r1, #24
 80061f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80061f4:	d402      	bmi.n	80061fc <_printf_i+0xe8>
 80061f6:	0649      	lsls	r1, r1, #25
 80061f8:	bf48      	it	mi
 80061fa:	b2ad      	uxthmi	r5, r5
 80061fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80061fe:	4852      	ldr	r0, [pc, #328]	@ (8006348 <_printf_i+0x234>)
 8006200:	6033      	str	r3, [r6, #0]
 8006202:	bf14      	ite	ne
 8006204:	230a      	movne	r3, #10
 8006206:	2308      	moveq	r3, #8
 8006208:	2100      	movs	r1, #0
 800620a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800620e:	6866      	ldr	r6, [r4, #4]
 8006210:	60a6      	str	r6, [r4, #8]
 8006212:	2e00      	cmp	r6, #0
 8006214:	db05      	blt.n	8006222 <_printf_i+0x10e>
 8006216:	6821      	ldr	r1, [r4, #0]
 8006218:	432e      	orrs	r6, r5
 800621a:	f021 0104 	bic.w	r1, r1, #4
 800621e:	6021      	str	r1, [r4, #0]
 8006220:	d04b      	beq.n	80062ba <_printf_i+0x1a6>
 8006222:	4616      	mov	r6, r2
 8006224:	fbb5 f1f3 	udiv	r1, r5, r3
 8006228:	fb03 5711 	mls	r7, r3, r1, r5
 800622c:	5dc7      	ldrb	r7, [r0, r7]
 800622e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006232:	462f      	mov	r7, r5
 8006234:	42bb      	cmp	r3, r7
 8006236:	460d      	mov	r5, r1
 8006238:	d9f4      	bls.n	8006224 <_printf_i+0x110>
 800623a:	2b08      	cmp	r3, #8
 800623c:	d10b      	bne.n	8006256 <_printf_i+0x142>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	07df      	lsls	r7, r3, #31
 8006242:	d508      	bpl.n	8006256 <_printf_i+0x142>
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	6861      	ldr	r1, [r4, #4]
 8006248:	4299      	cmp	r1, r3
 800624a:	bfde      	ittt	le
 800624c:	2330      	movle	r3, #48	@ 0x30
 800624e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006252:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006256:	1b92      	subs	r2, r2, r6
 8006258:	6122      	str	r2, [r4, #16]
 800625a:	f8cd a000 	str.w	sl, [sp]
 800625e:	464b      	mov	r3, r9
 8006260:	aa03      	add	r2, sp, #12
 8006262:	4621      	mov	r1, r4
 8006264:	4640      	mov	r0, r8
 8006266:	f7ff fee7 	bl	8006038 <_printf_common>
 800626a:	3001      	adds	r0, #1
 800626c:	d14a      	bne.n	8006304 <_printf_i+0x1f0>
 800626e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006272:	b004      	add	sp, #16
 8006274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	f043 0320 	orr.w	r3, r3, #32
 800627e:	6023      	str	r3, [r4, #0]
 8006280:	4832      	ldr	r0, [pc, #200]	@ (800634c <_printf_i+0x238>)
 8006282:	2778      	movs	r7, #120	@ 0x78
 8006284:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	6831      	ldr	r1, [r6, #0]
 800628c:	061f      	lsls	r7, r3, #24
 800628e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006292:	d402      	bmi.n	800629a <_printf_i+0x186>
 8006294:	065f      	lsls	r7, r3, #25
 8006296:	bf48      	it	mi
 8006298:	b2ad      	uxthmi	r5, r5
 800629a:	6031      	str	r1, [r6, #0]
 800629c:	07d9      	lsls	r1, r3, #31
 800629e:	bf44      	itt	mi
 80062a0:	f043 0320 	orrmi.w	r3, r3, #32
 80062a4:	6023      	strmi	r3, [r4, #0]
 80062a6:	b11d      	cbz	r5, 80062b0 <_printf_i+0x19c>
 80062a8:	2310      	movs	r3, #16
 80062aa:	e7ad      	b.n	8006208 <_printf_i+0xf4>
 80062ac:	4826      	ldr	r0, [pc, #152]	@ (8006348 <_printf_i+0x234>)
 80062ae:	e7e9      	b.n	8006284 <_printf_i+0x170>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	f023 0320 	bic.w	r3, r3, #32
 80062b6:	6023      	str	r3, [r4, #0]
 80062b8:	e7f6      	b.n	80062a8 <_printf_i+0x194>
 80062ba:	4616      	mov	r6, r2
 80062bc:	e7bd      	b.n	800623a <_printf_i+0x126>
 80062be:	6833      	ldr	r3, [r6, #0]
 80062c0:	6825      	ldr	r5, [r4, #0]
 80062c2:	6961      	ldr	r1, [r4, #20]
 80062c4:	1d18      	adds	r0, r3, #4
 80062c6:	6030      	str	r0, [r6, #0]
 80062c8:	062e      	lsls	r6, r5, #24
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	d501      	bpl.n	80062d2 <_printf_i+0x1be>
 80062ce:	6019      	str	r1, [r3, #0]
 80062d0:	e002      	b.n	80062d8 <_printf_i+0x1c4>
 80062d2:	0668      	lsls	r0, r5, #25
 80062d4:	d5fb      	bpl.n	80062ce <_printf_i+0x1ba>
 80062d6:	8019      	strh	r1, [r3, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	6123      	str	r3, [r4, #16]
 80062dc:	4616      	mov	r6, r2
 80062de:	e7bc      	b.n	800625a <_printf_i+0x146>
 80062e0:	6833      	ldr	r3, [r6, #0]
 80062e2:	1d1a      	adds	r2, r3, #4
 80062e4:	6032      	str	r2, [r6, #0]
 80062e6:	681e      	ldr	r6, [r3, #0]
 80062e8:	6862      	ldr	r2, [r4, #4]
 80062ea:	2100      	movs	r1, #0
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7f9 ff77 	bl	80001e0 <memchr>
 80062f2:	b108      	cbz	r0, 80062f8 <_printf_i+0x1e4>
 80062f4:	1b80      	subs	r0, r0, r6
 80062f6:	6060      	str	r0, [r4, #4]
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	2300      	movs	r3, #0
 80062fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006302:	e7aa      	b.n	800625a <_printf_i+0x146>
 8006304:	6923      	ldr	r3, [r4, #16]
 8006306:	4632      	mov	r2, r6
 8006308:	4649      	mov	r1, r9
 800630a:	4640      	mov	r0, r8
 800630c:	47d0      	blx	sl
 800630e:	3001      	adds	r0, #1
 8006310:	d0ad      	beq.n	800626e <_printf_i+0x15a>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	079b      	lsls	r3, r3, #30
 8006316:	d413      	bmi.n	8006340 <_printf_i+0x22c>
 8006318:	68e0      	ldr	r0, [r4, #12]
 800631a:	9b03      	ldr	r3, [sp, #12]
 800631c:	4298      	cmp	r0, r3
 800631e:	bfb8      	it	lt
 8006320:	4618      	movlt	r0, r3
 8006322:	e7a6      	b.n	8006272 <_printf_i+0x15e>
 8006324:	2301      	movs	r3, #1
 8006326:	4632      	mov	r2, r6
 8006328:	4649      	mov	r1, r9
 800632a:	4640      	mov	r0, r8
 800632c:	47d0      	blx	sl
 800632e:	3001      	adds	r0, #1
 8006330:	d09d      	beq.n	800626e <_printf_i+0x15a>
 8006332:	3501      	adds	r5, #1
 8006334:	68e3      	ldr	r3, [r4, #12]
 8006336:	9903      	ldr	r1, [sp, #12]
 8006338:	1a5b      	subs	r3, r3, r1
 800633a:	42ab      	cmp	r3, r5
 800633c:	dcf2      	bgt.n	8006324 <_printf_i+0x210>
 800633e:	e7eb      	b.n	8006318 <_printf_i+0x204>
 8006340:	2500      	movs	r5, #0
 8006342:	f104 0619 	add.w	r6, r4, #25
 8006346:	e7f5      	b.n	8006334 <_printf_i+0x220>
 8006348:	080064c9 	.word	0x080064c9
 800634c:	080064da 	.word	0x080064da

08006350 <memmove>:
 8006350:	4288      	cmp	r0, r1
 8006352:	b510      	push	{r4, lr}
 8006354:	eb01 0402 	add.w	r4, r1, r2
 8006358:	d902      	bls.n	8006360 <memmove+0x10>
 800635a:	4284      	cmp	r4, r0
 800635c:	4623      	mov	r3, r4
 800635e:	d807      	bhi.n	8006370 <memmove+0x20>
 8006360:	1e43      	subs	r3, r0, #1
 8006362:	42a1      	cmp	r1, r4
 8006364:	d008      	beq.n	8006378 <memmove+0x28>
 8006366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800636a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800636e:	e7f8      	b.n	8006362 <memmove+0x12>
 8006370:	4402      	add	r2, r0
 8006372:	4601      	mov	r1, r0
 8006374:	428a      	cmp	r2, r1
 8006376:	d100      	bne.n	800637a <memmove+0x2a>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800637e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006382:	e7f7      	b.n	8006374 <memmove+0x24>

08006384 <_sbrk_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4d06      	ldr	r5, [pc, #24]	@ (80063a0 <_sbrk_r+0x1c>)
 8006388:	2300      	movs	r3, #0
 800638a:	4604      	mov	r4, r0
 800638c:	4608      	mov	r0, r1
 800638e:	602b      	str	r3, [r5, #0]
 8006390:	f7fa fbaa 	bl	8000ae8 <_sbrk>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_sbrk_r+0x1a>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_sbrk_r+0x1a>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20004c34 	.word	0x20004c34

080063a4 <_realloc_r>:
 80063a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a8:	4607      	mov	r7, r0
 80063aa:	4614      	mov	r4, r2
 80063ac:	460d      	mov	r5, r1
 80063ae:	b921      	cbnz	r1, 80063ba <_realloc_r+0x16>
 80063b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063b4:	4611      	mov	r1, r2
 80063b6:	f7ff bc5b 	b.w	8005c70 <_malloc_r>
 80063ba:	b92a      	cbnz	r2, 80063c8 <_realloc_r+0x24>
 80063bc:	f7ff fbec 	bl	8005b98 <_free_r>
 80063c0:	4625      	mov	r5, r4
 80063c2:	4628      	mov	r0, r5
 80063c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c8:	f000 f81a 	bl	8006400 <_malloc_usable_size_r>
 80063cc:	4284      	cmp	r4, r0
 80063ce:	4606      	mov	r6, r0
 80063d0:	d802      	bhi.n	80063d8 <_realloc_r+0x34>
 80063d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063d6:	d8f4      	bhi.n	80063c2 <_realloc_r+0x1e>
 80063d8:	4621      	mov	r1, r4
 80063da:	4638      	mov	r0, r7
 80063dc:	f7ff fc48 	bl	8005c70 <_malloc_r>
 80063e0:	4680      	mov	r8, r0
 80063e2:	b908      	cbnz	r0, 80063e8 <_realloc_r+0x44>
 80063e4:	4645      	mov	r5, r8
 80063e6:	e7ec      	b.n	80063c2 <_realloc_r+0x1e>
 80063e8:	42b4      	cmp	r4, r6
 80063ea:	4622      	mov	r2, r4
 80063ec:	4629      	mov	r1, r5
 80063ee:	bf28      	it	cs
 80063f0:	4632      	movcs	r2, r6
 80063f2:	f7ff fbc3 	bl	8005b7c <memcpy>
 80063f6:	4629      	mov	r1, r5
 80063f8:	4638      	mov	r0, r7
 80063fa:	f7ff fbcd 	bl	8005b98 <_free_r>
 80063fe:	e7f1      	b.n	80063e4 <_realloc_r+0x40>

08006400 <_malloc_usable_size_r>:
 8006400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006404:	1f18      	subs	r0, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfbc      	itt	lt
 800640a:	580b      	ldrlt	r3, [r1, r0]
 800640c:	18c0      	addlt	r0, r0, r3
 800640e:	4770      	bx	lr

08006410 <_init>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr

0800641c <_fini>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	bf00      	nop
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr
